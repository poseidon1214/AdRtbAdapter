// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: max-bidding_v2.0.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "max-bidding_v2.0.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MAX {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_ContentCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_ContentCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ads_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ads_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto() {
  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "max-bidding_v2.0.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mediav_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mv_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adx_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_category_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, content_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_ad_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_ContentCategory_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_ContentCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, weight_),
  };
  BidRequest_ContentCategory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_ContentCategory_descriptor_,
      BidRequest_ContentCategory::default_instance_,
      BidRequest_ContentCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_ContentCategory));
  BidRequest_AdSlot_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_AdSlot_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, min_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, slot_visibility_),
  };
  BidRequest_AdSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_AdSlot_descriptor_,
      BidRequest_AdSlot::default_instance_,
      BidRequest_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_AdSlot));
  BidRequest_AdSlot_SlotVisibility_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(0);
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_fullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_category_),
  };
  BidRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile));
  BidRequest_Mobile_Device_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_Device_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, hashed_imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, android_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, hashed_android_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, hashed_mac_),
  };
  BidRequest_Mobile_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Mobile_Device_descriptor_,
      BidRequest_Mobile_Device::default_instance_,
      BidRequest_Mobile_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Mobile_Device));
  BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = BidRequest_Mobile_Device_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ads_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Ads_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ads_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, adslot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, max_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, extend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, nurl_),
  };
  BidResponse_Ads_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Ads_descriptor_,
      BidResponse_Ads::default_instance_,
      BidResponse_Ads_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Ads));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_ContentCategory_descriptor_, &BidRequest_ContentCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_AdSlot_descriptor_, &BidRequest_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Mobile_Device_descriptor_, &BidRequest_Mobile_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Ads_descriptor_, &BidResponse_Ads::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_ContentCategory::default_instance_;
  delete BidRequest_ContentCategory_reflection_;
  delete BidRequest_AdSlot::default_instance_;
  delete BidRequest_AdSlot_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_Device::default_instance_;
  delete BidRequest_Mobile_Device_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ads::default_instance_;
  delete BidResponse_Ads_reflection_;
}

void protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026max-bidding_v2.0.proto\022\003MAX\"\377\013\n\nBidReq"
    "uest\022\013\n\003bid\030\001 \002(\t\022\022\n\007is_test\030\t \001(\r:\0010\022\032\n"
    "\016mediav_user_id\030\002 \001(\tB\002\030\001\022\022\n\nmv_user_id\030"
    "\021 \001(\t\022\n\n\002ip\030\003 \001(\t\022\022\n\nuser_agent\030\004 \001(\t\022\025\n"
    "\ruser_vertical\030\n \003(\005\022\013\n\003url\030\005 \001(\t\022\023\n\010adx"
    "_type\030\006 \001(\r:\0010\022\031\n\021detected_language\030\013 \001("
    "\t\022\024\n\014publisher_id\030\r \001(\005\022\032\n\022publisher_cat"
    "egory\030\016 \003(\005\022\"\n\032publisher_category_versio"
    "n\030\017 \001(\005\0229\n\020content_category\030\022 \003(\0132\037.MAX."
    "BidRequest.ContentCategory\022&\n\006adslot\030\007 \003"
    "(\0132\026.MAX.BidRequest.AdSlot\022\032\n\022excluded_a"
    "ttribute\030\020 \003(\005\022\034\n\024excluded_ad_category\030\014"
    " \003(\005\022&\n\006mobile\030\010 \001(\0132\026.MAX.BidRequest.Mo"
    "bile\0323\n\017ContentCategory\022\n\n\002id\030\001 \002(\005\022\024\n\006w"
    "eight\030\002 \002(\005:\0041000\032\204\002\n\006AdSlot\022\n\n\002id\030\001 \002(\r"
    "\022\013\n\003pid\030\002 \001(\t\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004"
    " \001(\005\022\021\n\tview_type\030\005 \003(\r\022\025\n\rmin_cpm_price"
    "\030\006 \001(\r\022L\n\017slot_visibility\030\007 \001(\0162%.MAX.Bi"
    "dRequest.AdSlot.SlotVisibility:\014NO_DETEC"
    "TION\"J\n\016SlotVisibility\022\020\n\014NO_DETECTION\020\000"
    "\022\022\n\016ABOVE_THE_FOLD\020\001\022\022\n\016BELOW_THE_FOLD\020\002"
    "\032\324\005\n\006Mobile\022\016\n\006is_app\030\001 \001(\010\022\025\n\ris_fullsc"
    "reen\030\002 \001(\010\022\016\n\006app_id\030\003 \001(\t\022\024\n\014package_na"
    "me\030\006 \001(\t\022-\n\006device\030\004 \001(\0132\035.MAX.BidReques"
    "t.Mobile.Device\022\024\n\014app_category\030\005 \003(\005\032\267\004"
    "\n\006Device\022\020\n\010platform\030\001 \001(\t\022\r\n\005model\030\003 \001("
    "\t\022\n\n\002os\030\004 \001(\t\022\022\n\nos_version\030\005 \001(\t\022\017\n\007net"
    "work\030\006 \001(\r\022\022\n\ncarrier_id\030\007 \001(\005\022\021\n\tlongit"
    "ude\030\010 \001(\t\022\020\n\010latitude\030\t \001(\t\022\024\n\014screen_wi"
    "dth\030\n \001(\005\022\025\n\rscreen_height\030\013 \001(\005\022g\n\022scre"
    "en_orientation\030\014 \001(\0162/.MAX.BidRequest.Mo"
    "bile.Device.ScreenOrientation:\032SCREEN_OR"
    "IENTATION_UNKNOWN\022\014\n\004idfa\030\r \001(\t\022\023\n\013hashe"
    "d_idfa\030\016 \001(\t\022\014\n\004imei\030\020 \001(\t\022\023\n\013hashed_ime"
    "i\030\017 \001(\t\022\022\n\nandroid_id\030\021 \001(\t\022\031\n\021hashed_an"
    "droid_id\030\022 \001(\t\022\013\n\003mac\030\023 \001(\t\022\022\n\nhashed_ma"
    "c\030\024 \001(\t\"v\n\021ScreenOrientation\022\036\n\032SCREEN_O"
    "RIENTATION_UNKNOWN\020\000\022\037\n\033SCREEN_ORIENTATI"
    "ON_PORTRAIT\020\001\022 \n\034SCREEN_ORIENTATION_LAND"
    "SCAPE\020\002\"\265\002\n\013BidResponse\022\013\n\003bid\030\001 \002(\t\022!\n\003"
    "ads\030\003 \003(\0132\024.MAX.BidResponse.Ads\032\365\001\n\003Ads\022"
    "\021\n\tadslot_id\030\001 \002(\r\022\025\n\rmax_cpm_price\030\002 \002("
    "\r\022\024\n\014html_snippet\030\003 \001(\t\022\020\n\010category\030\004 \003("
    "\005\022\025\n\rcreative_type\030\005 \003(\005\022\027\n\017destination_"
    "url\030\006 \003(\t\022\025\n\radvertiser_id\030\007 \001(\t\022\023\n\013crea"
    "tive_id\030\010 \001(\t\022\r\n\005width\030\t \001(\005\022\016\n\006height\030\n"
    " \001(\005\022\023\n\013extend_data\030\013 \001(\t\022\014\n\004nurl\030\014 \001(\t", 1879);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "max-bidding_v2.0.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_ContentCategory::default_instance_ = new BidRequest_ContentCategory();
  BidRequest_AdSlot::default_instance_ = new BidRequest_AdSlot();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_Device::default_instance_ = new BidRequest_Mobile_Device();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ads::default_instance_ = new BidResponse_Ads();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_ContentCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_Device::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ads::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_max_2dbidding_5fv2_2e0_2eproto {
  StaticDescriptorInitializer_max_2dbidding_5fv2_2e0_2eproto() {
    protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  }
} static_descriptor_initializer_max_2dbidding_5fv2_2e0_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BidRequest_ContentCategory::kIdFieldNumber;
const int BidRequest_ContentCategory::kWeightFieldNumber;
#endif  // !_MSC_VER

BidRequest_ContentCategory::BidRequest_ContentCategory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_ContentCategory::InitAsDefaultInstance() {
}

BidRequest_ContentCategory::BidRequest_ContentCategory(const BidRequest_ContentCategory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_ContentCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  weight_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_ContentCategory::~BidRequest_ContentCategory() {
  SharedDtor();
}

void BidRequest_ContentCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_ContentCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_ContentCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ContentCategory_descriptor_;
}

const BidRequest_ContentCategory& BidRequest_ContentCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidRequest_ContentCategory* BidRequest_ContentCategory::default_instance_ = NULL;

BidRequest_ContentCategory* BidRequest_ContentCategory::New() const {
  return new BidRequest_ContentCategory;
}

void BidRequest_ContentCategory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    weight_ = 1000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_ContentCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required int32 weight = 2 [default = 1000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_ContentCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 weight = 2 [default = 1000];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_ContentCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 weight = 2 [default = 1000];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_ContentCategory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 weight = 2 [default = 1000];
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_ContentCategory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_ContentCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_ContentCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_ContentCategory::MergeFrom(const BidRequest_ContentCategory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_ContentCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_ContentCategory::CopyFrom(const BidRequest_ContentCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_ContentCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_ContentCategory::Swap(BidRequest_ContentCategory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_ContentCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_ContentCategory_descriptor_;
  metadata.reflection = BidRequest_ContentCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_SlotVisibility_descriptor_;
}
bool BidRequest_AdSlot_SlotVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::NO_DETECTION;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::ABOVE_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::BELOW_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MIN;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MAX;
const int BidRequest_AdSlot::SlotVisibility_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_AdSlot::kIdFieldNumber;
const int BidRequest_AdSlot::kPidFieldNumber;
const int BidRequest_AdSlot::kWidthFieldNumber;
const int BidRequest_AdSlot::kHeightFieldNumber;
const int BidRequest_AdSlot::kViewTypeFieldNumber;
const int BidRequest_AdSlot::kMinCpmPriceFieldNumber;
const int BidRequest_AdSlot::kSlotVisibilityFieldNumber;
#endif  // !_MSC_VER

BidRequest_AdSlot::BidRequest_AdSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_AdSlot::InitAsDefaultInstance() {
}

BidRequest_AdSlot::BidRequest_AdSlot(const BidRequest_AdSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_AdSlot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  min_cpm_price_ = 0u;
  slot_visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot::~BidRequest_AdSlot() {
  SharedDtor();
}

void BidRequest_AdSlot::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_descriptor_;
}

const BidRequest_AdSlot& BidRequest_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot* BidRequest_AdSlot::default_instance_ = NULL;

BidRequest_AdSlot* BidRequest_AdSlot::New() const {
  return new BidRequest_AdSlot;
}

void BidRequest_AdSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    min_cpm_price_ = 0u;
    slot_visibility_ = 0;
  }
  view_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pid;
        break;
      }

      // optional string pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        break;
      }

      // repeated uint32 view_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_view_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_view_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        if (input->ExpectTag(48)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_slot_visibility;
        break;
      }

      // optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAX::BidRequest_AdSlot_SlotVisibility_IsValid(value)) {
            set_slot_visibility(static_cast< ::MAX::BidRequest_AdSlot_SlotVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pid(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->view_type(i), output);
  }

  // optional uint32 min_cpm_price = 6;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_cpm_price(), output);
  }

  // optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->slot_visibility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->view_type(i), target);
  }

  // optional uint32 min_cpm_price = 6;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_cpm_price(), target);
  }

  // optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->slot_visibility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_AdSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional uint32 min_cpm_price = 6;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

    // optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
    if (has_slot_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_visibility());
    }

  }
  // repeated uint32 view_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->view_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->view_type(i));
    }
    total_size += 1 * this->view_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_AdSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_AdSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot::MergeFrom(const BidRequest_AdSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  view_type_.MergeFrom(from.view_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
    if (from.has_slot_visibility()) {
      set_slot_visibility(from.slot_visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot::CopyFrom(const BidRequest_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_AdSlot::Swap(BidRequest_AdSlot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    view_type_.Swap(&other->view_type_);
    std::swap(min_cpm_price_, other->min_cpm_price_);
    std::swap(slot_visibility_, other->slot_visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_descriptor_;
  metadata.reflection = BidRequest_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_ScreenOrientation_descriptor_;
}
bool BidRequest_Mobile_Device_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_PORTRAIT;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_LANDSCAPE;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MIN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MAX;
const int BidRequest_Mobile_Device::ScreenOrientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Mobile_Device::kPlatformFieldNumber;
const int BidRequest_Mobile_Device::kModelFieldNumber;
const int BidRequest_Mobile_Device::kOsFieldNumber;
const int BidRequest_Mobile_Device::kOsVersionFieldNumber;
const int BidRequest_Mobile_Device::kNetworkFieldNumber;
const int BidRequest_Mobile_Device::kCarrierIdFieldNumber;
const int BidRequest_Mobile_Device::kLongitudeFieldNumber;
const int BidRequest_Mobile_Device::kLatitudeFieldNumber;
const int BidRequest_Mobile_Device::kScreenWidthFieldNumber;
const int BidRequest_Mobile_Device::kScreenHeightFieldNumber;
const int BidRequest_Mobile_Device::kScreenOrientationFieldNumber;
const int BidRequest_Mobile_Device::kIdfaFieldNumber;
const int BidRequest_Mobile_Device::kHashedIdfaFieldNumber;
const int BidRequest_Mobile_Device::kImeiFieldNumber;
const int BidRequest_Mobile_Device::kHashedImeiFieldNumber;
const int BidRequest_Mobile_Device::kAndroidIdFieldNumber;
const int BidRequest_Mobile_Device::kHashedAndroidIdFieldNumber;
const int BidRequest_Mobile_Device::kMacFieldNumber;
const int BidRequest_Mobile_Device::kHashedMacFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile_Device::BidRequest_Mobile_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Mobile_Device::InitAsDefaultInstance() {
}

BidRequest_Mobile_Device::BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = 0u;
  carrier_id_ = 0;
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screen_width_ = 0;
  screen_height_ = 0;
  screen_orientation_ = 0;
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashed_imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashed_android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashed_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_Device::~BidRequest_Mobile_Device() {
  SharedDtor();
}

void BidRequest_Mobile_Device::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (hashed_idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_idfa_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (hashed_imei_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_imei_;
  }
  if (android_id_ != &::google::protobuf::internal::kEmptyString) {
    delete android_id_;
  }
  if (hashed_android_id_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_android_id_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (hashed_mac_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_mac_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_descriptor_;
}

const BidRequest_Mobile_Device& BidRequest_Mobile_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_Device* BidRequest_Mobile_Device::default_instance_ = NULL;

BidRequest_Mobile_Device* BidRequest_Mobile_Device::New() const {
  return new BidRequest_Mobile_Device;
}

void BidRequest_Mobile_Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    network_ = 0u;
    carrier_id_ = 0;
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::kEmptyString) {
        longitude_->clear();
      }
    }
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::kEmptyString) {
        latitude_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    screen_width_ = 0;
    screen_height_ = 0;
    screen_orientation_ = 0;
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_hashed_idfa()) {
      if (hashed_idfa_ != &::google::protobuf::internal::kEmptyString) {
        hashed_idfa_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_hashed_imei()) {
      if (hashed_imei_ != &::google::protobuf::internal::kEmptyString) {
        hashed_imei_->clear();
      }
    }
    if (has_android_id()) {
      if (android_id_ != &::google::protobuf::internal::kEmptyString) {
        android_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hashed_android_id()) {
      if (hashed_android_id_ != &::google::protobuf::internal::kEmptyString) {
        hashed_android_id_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_hashed_mac()) {
      if (hashed_mac_ != &::google::protobuf::internal::kEmptyString) {
        hashed_mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os;
        break;
      }

      // optional string os = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_os_version;
        break;
      }

      // optional string os_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_network;
        break;
      }

      // optional uint32 network = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_carrier_id;
        break;
      }

      // optional int32 carrier_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrier_id_)));
          set_has_carrier_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_longitude;
        break;
      }

      // optional string longitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_latitude;
        break;
      }

      // optional string latitude = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_screen_orientation;
        break;
      }

      // optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAX::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value)) {
            set_screen_orientation(static_cast< ::MAX::BidRequest_Mobile_Device_ScreenOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_idfa;
        break;
      }

      // optional string idfa = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hashed_idfa;
        break;
      }

      // optional string hashed_idfa = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashed_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashed_idfa().data(), this->hashed_idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hashed_imei;
        break;
      }

      // optional string hashed_imei = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashed_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashed_imei().data(), this->hashed_imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_imei;
        break;
      }

      // optional string imei = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_android_id;
        break;
      }

      // optional string android_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->android_id().data(), this->android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_hashed_android_id;
        break;
      }

      // optional string hashed_android_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashed_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashed_android_id().data(), this->hashed_android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mac;
        break;
      }

      // optional string mac = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_hashed_mac;
        break;
      }

      // optional string hashed_mac = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashed_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashed_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashed_mac().data(), this->hashed_mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Mobile_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->platform(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->os(), output);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->os_version(), output);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network(), output);
  }

  // optional int32 carrier_id = 7;
  if (has_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->carrier_id(), output);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->longitude(), output);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->latitude(), output);
  }

  // optional int32 screen_width = 10;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->screen_width(), output);
  }

  // optional int32 screen_height = 11;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->screen_height(), output);
  }

  // optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->screen_orientation(), output);
  }

  // optional string idfa = 13;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->idfa(), output);
  }

  // optional string hashed_idfa = 14;
  if (has_hashed_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_idfa().data(), this->hashed_idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->hashed_idfa(), output);
  }

  // optional string hashed_imei = 15;
  if (has_hashed_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_imei().data(), this->hashed_imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->hashed_imei(), output);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->imei(), output);
  }

  // optional string android_id = 17;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->android_id(), output);
  }

  // optional string hashed_android_id = 18;
  if (has_hashed_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_android_id().data(), this->hashed_android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->hashed_android_id(), output);
  }

  // optional string mac = 19;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->mac(), output);
  }

  // optional string hashed_mac = 20;
  if (has_hashed_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_mac().data(), this->hashed_mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->hashed_mac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Mobile_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os(), target);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os_version(), target);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network(), target);
  }

  // optional int32 carrier_id = 7;
  if (has_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->carrier_id(), target);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->longitude(), target);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->latitude(), target);
  }

  // optional int32 screen_width = 10;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->screen_width(), target);
  }

  // optional int32 screen_height = 11;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->screen_height(), target);
  }

  // optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->screen_orientation(), target);
  }

  // optional string idfa = 13;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->idfa(), target);
  }

  // optional string hashed_idfa = 14;
  if (has_hashed_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_idfa().data(), this->hashed_idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->hashed_idfa(), target);
  }

  // optional string hashed_imei = 15;
  if (has_hashed_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_imei().data(), this->hashed_imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hashed_imei(), target);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->imei(), target);
  }

  // optional string android_id = 17;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->android_id(), target);
  }

  // optional string hashed_android_id = 18;
  if (has_hashed_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_android_id().data(), this->hashed_android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->hashed_android_id(), target);
  }

  // optional string mac = 19;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->mac(), target);
  }

  // optional string hashed_mac = 20;
  if (has_hashed_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashed_mac().data(), this->hashed_mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hashed_mac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Mobile_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 5;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint32 network = 6;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network());
    }

    // optional int32 carrier_id = 7;
    if (has_carrier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carrier_id());
    }

    // optional string longitude = 8;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

    // optional string latitude = 9;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 screen_width = 10;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // optional int32 screen_height = 11;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
    if (has_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_orientation());
    }

    // optional string idfa = 13;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string hashed_idfa = 14;
    if (has_hashed_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashed_idfa());
    }

    // optional string imei = 16;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string hashed_imei = 15;
    if (has_hashed_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashed_imei());
    }

    // optional string android_id = 17;
    if (has_android_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string hashed_android_id = 18;
    if (has_hashed_android_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashed_android_id());
    }

    // optional string mac = 19;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string hashed_mac = 20;
    if (has_hashed_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashed_mac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_Device::MergeFrom(const BidRequest_Mobile_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_carrier_id()) {
      set_carrier_id(from.carrier_id());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_screen_orientation()) {
      set_screen_orientation(from.screen_orientation());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_hashed_idfa()) {
      set_hashed_idfa(from.hashed_idfa());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_hashed_imei()) {
      set_hashed_imei(from.hashed_imei());
    }
    if (from.has_android_id()) {
      set_android_id(from.android_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hashed_android_id()) {
      set_hashed_android_id(from.hashed_android_id());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_hashed_mac()) {
      set_hashed_mac(from.hashed_mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::CopyFrom(const BidRequest_Mobile_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_Device::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_Device::Swap(BidRequest_Mobile_Device* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(network_, other->network_);
    std::swap(carrier_id_, other->carrier_id_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(screen_orientation_, other->screen_orientation_);
    std::swap(idfa_, other->idfa_);
    std::swap(hashed_idfa_, other->hashed_idfa_);
    std::swap(imei_, other->imei_);
    std::swap(hashed_imei_, other->hashed_imei_);
    std::swap(android_id_, other->android_id_);
    std::swap(hashed_android_id_, other->hashed_android_id_);
    std::swap(mac_, other->mac_);
    std::swap(hashed_mac_, other->hashed_mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_Device_descriptor_;
  metadata.reflection = BidRequest_Mobile_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kIsFullscreenFieldNumber;
const int BidRequest_Mobile::kAppIdFieldNumber;
const int BidRequest_Mobile::kPackageNameFieldNumber;
const int BidRequest_Mobile::kDeviceFieldNumber;
const int BidRequest_Mobile::kAppCategoryFieldNumber;
#endif  // !_MSC_VER

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  device_ = const_cast< ::MAX::BidRequest_Mobile_Device*>(&::MAX::BidRequest_Mobile_Device::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Mobile::SharedCtor() {
  _cached_size_ = 0;
  is_app_ = false;
  is_fullscreen_ = false;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (package_name_ != &::google::protobuf::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
    delete device_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New() const {
  return new BidRequest_Mobile;
}

void BidRequest_Mobile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_app_ = false;
    is_fullscreen_ = false;
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_package_name()) {
      if (package_name_ != &::google::protobuf::internal::kEmptyString) {
        package_name_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::MAX::BidRequest_Mobile_Device::Clear();
    }
  }
  app_category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_app = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_fullscreen;
        break;
      }

      // optional bool is_fullscreen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fullscreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fullscreen_)));
          set_has_is_fullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_id;
        break;
      }

      // optional string app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .MAX.BidRequest.Mobile.Device device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_app_category;
        break;
      }

      // repeated int32 app_category = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_app_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_app_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_app_category;
        if (input->ExpectTag(50)) goto parse_package_name;
        break;
      }

      // optional string package_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_app = 1;
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_app(), output);
  }

  // optional bool is_fullscreen = 2;
  if (has_is_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_fullscreen(), output);
  }

  // optional string app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->app_id(), output);
  }

  // optional .MAX.BidRequest.Mobile.Device device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device(), output);
  }

  // repeated int32 app_category = 5;
  for (int i = 0; i < this->app_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->app_category(i), output);
  }

  // optional string package_name = 6;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->package_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_app = 1;
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_app(), target);
  }

  // optional bool is_fullscreen = 2;
  if (has_is_fullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_fullscreen(), target);
  }

  // optional string app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_id(), target);
  }

  // optional .MAX.BidRequest.Mobile.Device device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device(), target);
  }

  // repeated int32 app_category = 5;
  for (int i = 0; i < this->app_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->app_category(i), target);
  }

  // optional string package_name = 6;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->package_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_app = 1;
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional bool is_fullscreen = 2;
    if (has_is_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional string app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string package_name = 6;
    if (has_package_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .MAX.BidRequest.Mobile.Device device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

  }
  // repeated int32 app_category = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->app_category(i));
    }
    total_size += 1 * this->app_category_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_category_.MergeFrom(from.app_category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_is_fullscreen()) {
      set_is_fullscreen(from.is_fullscreen());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
    if (from.has_device()) {
      mutable_device()->::MAX::BidRequest_Mobile_Device::MergeFrom(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other != this) {
    std::swap(is_app_, other->is_app_);
    std::swap(is_fullscreen_, other->is_fullscreen_);
    std::swap(app_id_, other->app_id_);
    std::swap(package_name_, other->package_name_);
    std::swap(device_, other->device_);
    app_category_.Swap(&other->app_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kBidFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kMediavUserIdFieldNumber;
const int BidRequest::kMvUserIdFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kAdxTypeFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kPublisherIdFieldNumber;
const int BidRequest::kPublisherCategoryFieldNumber;
const int BidRequest::kPublisherCategoryVersionFieldNumber;
const int BidRequest::kContentCategoryFieldNumber;
const int BidRequest::kAdslotFieldNumber;
const int BidRequest::kExcludedAttributeFieldNumber;
const int BidRequest::kExcludedAdCategoryFieldNumber;
const int BidRequest::kMobileFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest::InitAsDefaultInstance() {
  mobile_ = const_cast< ::MAX::BidRequest_Mobile*>(&::MAX::BidRequest_Mobile::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest::SharedCtor() {
  _cached_size_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_test_ = 0u;
  mediav_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mv_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adx_type_ = 0u;
  detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publisher_id_ = 0;
  publisher_category_version_ = 0;
  mobile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (mediav_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mediav_user_id_;
  }
  if (mv_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mv_user_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
    delete detected_language_;
  }
  if (this != default_instance_) {
    delete mobile_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
    is_test_ = 0u;
    if (has_mediav_user_id()) {
      if (mediav_user_id_ != &::google::protobuf::internal::kEmptyString) {
        mediav_user_id_->clear();
      }
    }
    if (has_mv_user_id()) {
      if (mv_user_id_ != &::google::protobuf::internal::kEmptyString) {
        mv_user_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adx_type_ = 0u;
    if (has_detected_language()) {
      if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
        detected_language_->clear();
      }
    }
    publisher_id_ = 0;
    publisher_category_version_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::MAX::BidRequest_Mobile::Clear();
    }
  }
  user_vertical_.Clear();
  publisher_category_.Clear();
  content_category_.Clear();
  adslot_.Clear();
  excluded_attribute_.Clear();
  excluded_ad_category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mediav_user_id;
        break;
      }

      // optional string mediav_user_id = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediav_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediav_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediav_user_id().data(), this->mediav_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adx_type;
        break;
      }

      // optional uint32 adx_type = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adx_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adx_type_)));
          set_has_adx_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_adslot;
        break;
      }

      // repeated .MAX.BidRequest.AdSlot adslot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_adslot;
        if (input->ExpectTag(66)) goto parse_mobile;
        break;
      }

      // optional .MAX.BidRequest.Mobile mobile = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_test;
        break;
      }

      // optional uint32 is_test = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_user_vertical())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_user_vertical;
        if (input->ExpectTag(90)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_excluded_ad_category;
        break;
      }

      // repeated int32 excluded_ad_category = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excluded_ad_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_excluded_ad_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_ad_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_excluded_ad_category;
        if (input->ExpectTag(104)) goto parse_publisher_id;
        break;
      }

      // optional int32 publisher_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publisher_id_)));
          set_has_publisher_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_publisher_category;
        break;
      }

      // repeated int32 publisher_category = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_publisher_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_publisher_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_publisher_category;
        if (input->ExpectTag(120)) goto parse_publisher_category_version;
        break;
      }

      // optional int32 publisher_category_version = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_category_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publisher_category_version_)));
          set_has_publisher_category_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_excluded_attribute;
        break;
      }

      // repeated int32 excluded_attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excluded_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_excluded_attribute())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_attribute())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_excluded_attribute;
        if (input->ExpectTag(138)) goto parse_mv_user_id;
        break;
      }

      // optional string mv_user_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mv_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mv_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mv_user_id().data(), this->mv_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_content_category;
        break;
      }

      // repeated .MAX.BidRequest.ContentCategory content_category = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_category()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_content_category;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bid(), output);
  }

  // optional string mediav_user_id = 2 [deprecated = true];
  if (has_mediav_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediav_user_id().data(), this->mediav_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mediav_user_id(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string user_agent = 4;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_agent(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }

  // optional uint32 adx_type = 6 [default = 0];
  if (has_adx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->adx_type(), output);
  }

  // repeated .MAX.BidRequest.AdSlot adslot = 7;
  for (int i = 0; i < this->adslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adslot(i), output);
  }

  // optional .MAX.BidRequest.Mobile mobile = 8;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mobile(), output);
  }

  // optional uint32 is_test = 9 [default = 0];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_test(), output);
  }

  // repeated int32 user_vertical = 10;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->user_vertical(i), output);
  }

  // optional string detected_language = 11;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->detected_language(), output);
  }

  // repeated int32 excluded_ad_category = 12;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->excluded_ad_category(i), output);
  }

  // optional int32 publisher_id = 13;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->publisher_id(), output);
  }

  // repeated int32 publisher_category = 14;
  for (int i = 0; i < this->publisher_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->publisher_category(i), output);
  }

  // optional int32 publisher_category_version = 15;
  if (has_publisher_category_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->publisher_category_version(), output);
  }

  // repeated int32 excluded_attribute = 16;
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->excluded_attribute(i), output);
  }

  // optional string mv_user_id = 17;
  if (has_mv_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mv_user_id().data(), this->mv_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->mv_user_id(), output);
  }

  // repeated .MAX.BidRequest.ContentCategory content_category = 18;
  for (int i = 0; i < this->content_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->content_category(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bid(), target);
  }

  // optional string mediav_user_id = 2 [deprecated = true];
  if (has_mediav_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediav_user_id().data(), this->mediav_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mediav_user_id(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string user_agent = 4;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_agent(), target);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional uint32 adx_type = 6 [default = 0];
  if (has_adx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->adx_type(), target);
  }

  // repeated .MAX.BidRequest.AdSlot adslot = 7;
  for (int i = 0; i < this->adslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->adslot(i), target);
  }

  // optional .MAX.BidRequest.Mobile mobile = 8;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mobile(), target);
  }

  // optional uint32 is_test = 9 [default = 0];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->is_test(), target);
  }

  // repeated int32 user_vertical = 10;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->user_vertical(i), target);
  }

  // optional string detected_language = 11;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->detected_language(), target);
  }

  // repeated int32 excluded_ad_category = 12;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->excluded_ad_category(i), target);
  }

  // optional int32 publisher_id = 13;
  if (has_publisher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->publisher_id(), target);
  }

  // repeated int32 publisher_category = 14;
  for (int i = 0; i < this->publisher_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->publisher_category(i), target);
  }

  // optional int32 publisher_category_version = 15;
  if (has_publisher_category_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->publisher_category_version(), target);
  }

  // repeated int32 excluded_attribute = 16;
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->excluded_attribute(i), target);
  }

  // optional string mv_user_id = 17;
  if (has_mv_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mv_user_id().data(), this->mv_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mv_user_id(), target);
  }

  // repeated .MAX.BidRequest.ContentCategory content_category = 18;
  for (int i = 0; i < this->content_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->content_category(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional uint32 is_test = 9 [default = 0];
    if (has_is_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_test());
    }

    // optional string mediav_user_id = 2 [deprecated = true];
    if (has_mediav_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediav_user_id());
    }

    // optional string mv_user_id = 17;
    if (has_mv_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mv_user_id());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 4;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 adx_type = 6 [default = 0];
    if (has_adx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adx_type());
    }

    // optional string detected_language = 11;
    if (has_detected_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

    // optional int32 publisher_id = 13;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publisher_id());
    }

    // optional int32 publisher_category_version = 15;
    if (has_publisher_category_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publisher_category_version());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .MAX.BidRequest.Mobile mobile = 8;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

  }
  // repeated int32 user_vertical = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    total_size += 1 * this->user_vertical_size() + data_size;
  }

  // repeated int32 publisher_category = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->publisher_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->publisher_category(i));
    }
    total_size += 1 * this->publisher_category_size() + data_size;
  }

  // repeated .MAX.BidRequest.ContentCategory content_category = 18;
  total_size += 2 * this->content_category_size();
  for (int i = 0; i < this->content_category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_category(i));
  }

  // repeated .MAX.BidRequest.AdSlot adslot = 7;
  total_size += 1 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  // repeated int32 excluded_attribute = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_attribute(i));
    }
    total_size += 2 * this->excluded_attribute_size() + data_size;
  }

  // repeated int32 excluded_ad_category = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_ad_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_ad_category(i));
    }
    total_size += 1 * this->excluded_ad_category_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_vertical_.MergeFrom(from.user_vertical_);
  publisher_category_.MergeFrom(from.publisher_category_);
  content_category_.MergeFrom(from.content_category_);
  adslot_.MergeFrom(from.adslot_);
  excluded_attribute_.MergeFrom(from.excluded_attribute_);
  excluded_ad_category_.MergeFrom(from.excluded_ad_category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_mediav_user_id()) {
      set_mediav_user_id(from.mediav_user_id());
    }
    if (from.has_mv_user_id()) {
      set_mv_user_id(from.mv_user_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adx_type()) {
      set_adx_type(from.adx_type());
    }
    if (from.has_detected_language()) {
      set_detected_language(from.detected_language());
    }
    if (from.has_publisher_id()) {
      set_publisher_id(from.publisher_id());
    }
    if (from.has_publisher_category_version()) {
      set_publisher_category_version(from.publisher_category_version());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_mobile()) {
      mutable_mobile()->::MAX::BidRequest_Mobile::MergeFrom(from.mobile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < content_category_size(); i++) {
    if (!this->content_category(i).IsInitialized()) return false;
  }
  for (int i = 0; i < adslot_size(); i++) {
    if (!this->adslot(i).IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(is_test_, other->is_test_);
    std::swap(mediav_user_id_, other->mediav_user_id_);
    std::swap(mv_user_id_, other->mv_user_id_);
    std::swap(ip_, other->ip_);
    std::swap(user_agent_, other->user_agent_);
    user_vertical_.Swap(&other->user_vertical_);
    std::swap(url_, other->url_);
    std::swap(adx_type_, other->adx_type_);
    std::swap(detected_language_, other->detected_language_);
    std::swap(publisher_id_, other->publisher_id_);
    publisher_category_.Swap(&other->publisher_category_);
    std::swap(publisher_category_version_, other->publisher_category_version_);
    content_category_.Swap(&other->content_category_);
    adslot_.Swap(&other->adslot_);
    excluded_attribute_.Swap(&other->excluded_attribute_);
    excluded_ad_category_.Swap(&other->excluded_ad_category_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Ads::kAdslotIdFieldNumber;
const int BidResponse_Ads::kMaxCpmPriceFieldNumber;
const int BidResponse_Ads::kHtmlSnippetFieldNumber;
const int BidResponse_Ads::kCategoryFieldNumber;
const int BidResponse_Ads::kCreativeTypeFieldNumber;
const int BidResponse_Ads::kDestinationUrlFieldNumber;
const int BidResponse_Ads::kAdvertiserIdFieldNumber;
const int BidResponse_Ads::kCreativeIdFieldNumber;
const int BidResponse_Ads::kWidthFieldNumber;
const int BidResponse_Ads::kHeightFieldNumber;
const int BidResponse_Ads::kExtendDataFieldNumber;
const int BidResponse_Ads::kNurlFieldNumber;
#endif  // !_MSC_VER

BidResponse_Ads::BidResponse_Ads()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse_Ads::InitAsDefaultInstance() {
}

BidResponse_Ads::BidResponse_Ads(const BidResponse_Ads& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse_Ads::SharedCtor() {
  _cached_size_ = 0;
  adslot_id_ = 0u;
  max_cpm_price_ = 0u;
  html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  advertiser_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ads::~BidResponse_Ads() {
  SharedDtor();
}

void BidResponse_Ads::SharedDtor() {
  if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
    delete html_snippet_;
  }
  if (advertiser_id_ != &::google::protobuf::internal::kEmptyString) {
    delete advertiser_id_;
  }
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_data_;
  }
  if (nurl_ != &::google::protobuf::internal::kEmptyString) {
    delete nurl_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Ads::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ads_descriptor_;
}

const BidResponse_Ads& BidResponse_Ads::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidResponse_Ads* BidResponse_Ads::default_instance_ = NULL;

BidResponse_Ads* BidResponse_Ads::New() const {
  return new BidResponse_Ads;
}

void BidResponse_Ads::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    adslot_id_ = 0u;
    max_cpm_price_ = 0u;
    if (has_html_snippet()) {
      if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
        html_snippet_->clear();
      }
    }
    if (has_advertiser_id()) {
      if (advertiser_id_ != &::google::protobuf::internal::kEmptyString) {
        advertiser_id_->clear();
      }
    }
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
        creative_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    width_ = 0;
    height_ = 0;
    if (has_extend_data()) {
      if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
        extend_data_->clear();
      }
    }
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::kEmptyString) {
        nurl_->clear();
      }
    }
  }
  category_.Clear();
  creative_type_.Clear();
  destination_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Ads::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adslot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adslot_id_)));
          set_has_adslot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_price;
        break;
      }

      // required uint32 max_cpm_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpm_price_)));
          set_has_max_cpm_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_category;
        break;
      }

      // repeated int32 category = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_category())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_category;
        if (input->ExpectTag(40)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_creative_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_creative_type;
        if (input->ExpectTag(50)) goto parse_destination_url;
        break;
      }

      // repeated string destination_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination_url(this->destination_url_size() - 1).data(),
            this->destination_url(this->destination_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_destination_url;
        if (input->ExpectTag(58)) goto parse_advertiser_id;
        break;
      }

      // optional string advertiser_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advertiser_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advertiser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->advertiser_id().data(), this->advertiser_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // optional int32 width = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional int32 height = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_nurl;
        break;
      }

      // optional string nurl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse_Ads::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 adslot_id = 1;
  if (has_adslot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adslot_id(), output);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_cpm_price(), output);
  }

  // optional string html_snippet = 3;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->html_snippet(), output);
  }

  // repeated int32 category = 4;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->category(i), output);
  }

  // repeated int32 creative_type = 5;
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->creative_type(i), output);
  }

  // repeated string destination_url = 6;
  for (int i = 0; i < this->destination_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->destination_url(i).data(), this->destination_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->destination_url(i), output);
  }

  // optional string advertiser_id = 7;
  if (has_advertiser_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advertiser_id().data(), this->advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->advertiser_id(), output);
  }

  // optional string creative_id = 8;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->creative_id(), output);
  }

  // optional int32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->width(), output);
  }

  // optional int32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // optional string extend_data = 11;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->extend_data(), output);
  }

  // optional string nurl = 12;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->nurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse_Ads::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 adslot_id = 1;
  if (has_adslot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adslot_id(), target);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_cpm_price(), target);
  }

  // optional string html_snippet = 3;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->html_snippet(), target);
  }

  // repeated int32 category = 4;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->category(i), target);
  }

  // repeated int32 creative_type = 5;
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->creative_type(i), target);
  }

  // repeated string destination_url = 6;
  for (int i = 0; i < this->destination_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_url(i).data(), this->destination_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->destination_url(i), target);
  }

  // optional string advertiser_id = 7;
  if (has_advertiser_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advertiser_id().data(), this->advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->advertiser_id(), target);
  }

  // optional string creative_id = 8;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->creative_id(), target);
  }

  // optional int32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->width(), target);
  }

  // optional int32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->height(), target);
  }

  // optional string extend_data = 11;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->extend_data(), target);
  }

  // optional string nurl = 12;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->nurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse_Ads::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adslot_id = 1;
    if (has_adslot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adslot_id());
    }

    // required uint32 max_cpm_price = 2;
    if (has_max_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cpm_price());
    }

    // optional string html_snippet = 3;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string advertiser_id = 7;
    if (has_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advertiser_id());
    }

    // optional string creative_id = 8;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional string extend_data = 11;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

    // optional string nurl = 12;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

  }
  // repeated int32 category = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 creative_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    total_size += 1 * this->creative_type_size() + data_size;
  }

  // repeated string destination_url = 6;
  total_size += 1 * this->destination_url_size();
  for (int i = 0; i < this->destination_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ads::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Ads* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Ads*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ads::MergeFrom(const BidResponse_Ads& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  creative_type_.MergeFrom(from.creative_type_);
  destination_url_.MergeFrom(from.destination_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adslot_id()) {
      set_adslot_id(from.adslot_id());
    }
    if (from.has_max_cpm_price()) {
      set_max_cpm_price(from.max_cpm_price());
    }
    if (from.has_html_snippet()) {
      set_html_snippet(from.html_snippet());
    }
    if (from.has_advertiser_id()) {
      set_advertiser_id(from.advertiser_id());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_extend_data()) {
      set_extend_data(from.extend_data());
    }
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Ads::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ads::CopyFrom(const BidResponse_Ads& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ads::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidResponse_Ads::Swap(BidResponse_Ads* other) {
  if (other != this) {
    std::swap(adslot_id_, other->adslot_id_);
    std::swap(max_cpm_price_, other->max_cpm_price_);
    std::swap(html_snippet_, other->html_snippet_);
    category_.Swap(&other->category_);
    creative_type_.Swap(&other->creative_type_);
    destination_url_.Swap(&other->destination_url_);
    std::swap(advertiser_id_, other->advertiser_id_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(extend_data_, other->extend_data_);
    std::swap(nurl_, other->nurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_Ads::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ads_descriptor_;
  metadata.reflection = BidResponse_Ads_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kBidFieldNumber;
const int BidResponse::kAdsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse::SharedCtor() {
  _cached_size_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
  }
  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        break;
      }

      // repeated .MAX.BidResponse.Ads ads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bid(), output);
  }

  // repeated .MAX.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bid(), target);
  }

  // repeated .MAX.BidResponse.Ads ads = 3;
  for (int i = 0; i < this->ads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

  }
  // repeated .MAX.BidResponse.Ads ads = 3;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ads_size(); i++) {
    if (!this->ads(i).IsInitialized()) return false;
  }
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    ads_.Swap(&other->ads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MAX

// @@protoc_insertion_point(global_scope)
