// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: max-bidding_v2.0.proto

#ifndef PROTOBUF_max_2dbidding_5fv2_2e0_2eproto__INCLUDED
#define PROTOBUF_max_2dbidding_5fv2_2e0_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MAX {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

class BidRequest;
class BidRequest_ContentCategory;
class BidRequest_AdSlot;
class BidRequest_Mobile;
class BidRequest_Mobile_Device;
class BidResponse;
class BidResponse_Ads;

enum BidRequest_AdSlot_SlotVisibility {
  BidRequest_AdSlot_SlotVisibility_NO_DETECTION = 0,
  BidRequest_AdSlot_SlotVisibility_ABOVE_THE_FOLD = 1,
  BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD = 2
};
bool BidRequest_AdSlot_SlotVisibility_IsValid(int value);
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot_SlotVisibility_SlotVisibility_MIN = BidRequest_AdSlot_SlotVisibility_NO_DETECTION;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX = BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD;
const int BidRequest_AdSlot_SlotVisibility_SlotVisibility_ARRAYSIZE = BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor();
inline const ::std::string& BidRequest_AdSlot_SlotVisibility_Name(BidRequest_AdSlot_SlotVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_AdSlot_SlotVisibility_descriptor(), value);
}
inline bool BidRequest_AdSlot_SlotVisibility_Parse(
    const ::std::string& name, BidRequest_AdSlot_SlotVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_AdSlot_SlotVisibility>(
    BidRequest_AdSlot_SlotVisibility_descriptor(), name, value);
}
enum BidRequest_Mobile_Device_ScreenOrientation {
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN = 0,
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT = 1,
  BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE = 2
};
bool BidRequest_Mobile_Device_ScreenOrientation_IsValid(int value);
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MIN = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
const int BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE = BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor();
inline const ::std::string& BidRequest_Mobile_Device_ScreenOrientation_Name(BidRequest_Mobile_Device_ScreenOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Mobile_Device_ScreenOrientation_descriptor(), value);
}
inline bool BidRequest_Mobile_Device_ScreenOrientation_Parse(
    const ::std::string& name, BidRequest_Mobile_Device_ScreenOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Mobile_Device_ScreenOrientation>(
    BidRequest_Mobile_Device_ScreenOrientation_descriptor(), name, value);
}
// ===================================================================

class BidRequest_ContentCategory : public ::google::protobuf::Message {
 public:
  BidRequest_ContentCategory();
  virtual ~BidRequest_ContentCategory();

  BidRequest_ContentCategory(const BidRequest_ContentCategory& from);

  inline BidRequest_ContentCategory& operator=(const BidRequest_ContentCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_ContentCategory& default_instance();

  void Swap(BidRequest_ContentCategory* other);

  // implements Message ----------------------------------------------

  BidRequest_ContentCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_ContentCategory& from);
  void MergeFrom(const BidRequest_ContentCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 weight = 2 [default = 1000];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MAX.BidRequest.ContentCategory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_ContentCategory* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_AdSlot : public ::google::protobuf::Message {
 public:
  BidRequest_AdSlot();
  virtual ~BidRequest_AdSlot();

  BidRequest_AdSlot(const BidRequest_AdSlot& from);

  inline BidRequest_AdSlot& operator=(const BidRequest_AdSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_AdSlot& default_instance();

  void Swap(BidRequest_AdSlot* other);

  // implements Message ----------------------------------------------

  BidRequest_AdSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_AdSlot& from);
  void MergeFrom(const BidRequest_AdSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_AdSlot_SlotVisibility SlotVisibility;
  static const SlotVisibility NO_DETECTION = BidRequest_AdSlot_SlotVisibility_NO_DETECTION;
  static const SlotVisibility ABOVE_THE_FOLD = BidRequest_AdSlot_SlotVisibility_ABOVE_THE_FOLD;
  static const SlotVisibility BELOW_THE_FOLD = BidRequest_AdSlot_SlotVisibility_BELOW_THE_FOLD;
  static inline bool SlotVisibility_IsValid(int value) {
    return BidRequest_AdSlot_SlotVisibility_IsValid(value);
  }
  static const SlotVisibility SlotVisibility_MIN =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_MIN;
  static const SlotVisibility SlotVisibility_MAX =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_MAX;
  static const int SlotVisibility_ARRAYSIZE =
    BidRequest_AdSlot_SlotVisibility_SlotVisibility_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SlotVisibility_descriptor() {
    return BidRequest_AdSlot_SlotVisibility_descriptor();
  }
  static inline const ::std::string& SlotVisibility_Name(SlotVisibility value) {
    return BidRequest_AdSlot_SlotVisibility_Name(value);
  }
  static inline bool SlotVisibility_Parse(const ::std::string& name,
      SlotVisibility* value) {
    return BidRequest_AdSlot_SlotVisibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline const ::std::string& pid() const;
  inline void set_pid(const ::std::string& value);
  inline void set_pid(const char* value);
  inline void set_pid(const char* value, size_t size);
  inline ::std::string* mutable_pid();
  inline ::std::string* release_pid();
  inline void set_allocated_pid(::std::string* pid);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // repeated uint32 view_type = 5;
  inline int view_type_size() const;
  inline void clear_view_type();
  static const int kViewTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 view_type(int index) const;
  inline void set_view_type(int index, ::google::protobuf::uint32 value);
  inline void add_view_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      view_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_view_type();

  // optional uint32 min_cpm_price = 6;
  inline bool has_min_cpm_price() const;
  inline void clear_min_cpm_price();
  static const int kMinCpmPriceFieldNumber = 6;
  inline ::google::protobuf::uint32 min_cpm_price() const;
  inline void set_min_cpm_price(::google::protobuf::uint32 value);

  // optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
  inline bool has_slot_visibility() const;
  inline void clear_slot_visibility();
  static const int kSlotVisibilityFieldNumber = 7;
  inline ::MAX::BidRequest_AdSlot_SlotVisibility slot_visibility() const;
  inline void set_slot_visibility(::MAX::BidRequest_AdSlot_SlotVisibility value);

  // @@protoc_insertion_point(class_scope:MAX.BidRequest.AdSlot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_min_cpm_price();
  inline void clear_has_min_cpm_price();
  inline void set_has_slot_visibility();
  inline void clear_has_slot_visibility();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > view_type_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::uint32 min_cpm_price_;
  int slot_visibility_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_AdSlot* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile_Device();
  virtual ~BidRequest_Mobile_Device();

  BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from);

  inline BidRequest_Mobile_Device& operator=(const BidRequest_Mobile_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile_Device& default_instance();

  void Swap(BidRequest_Mobile_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile_Device& from);
  void MergeFrom(const BidRequest_Mobile_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_Device_ScreenOrientation ScreenOrientation;
  static const ScreenOrientation SCREEN_ORIENTATION_UNKNOWN = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_UNKNOWN;
  static const ScreenOrientation SCREEN_ORIENTATION_PORTRAIT = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_PORTRAIT;
  static const ScreenOrientation SCREEN_ORIENTATION_LANDSCAPE = BidRequest_Mobile_Device_ScreenOrientation_SCREEN_ORIENTATION_LANDSCAPE;
  static inline bool ScreenOrientation_IsValid(int value) {
    return BidRequest_Mobile_Device_ScreenOrientation_IsValid(value);
  }
  static const ScreenOrientation ScreenOrientation_MIN =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MIN;
  static const ScreenOrientation ScreenOrientation_MAX =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_MAX;
  static const int ScreenOrientation_ARRAYSIZE =
    BidRequest_Mobile_Device_ScreenOrientation_ScreenOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScreenOrientation_descriptor() {
    return BidRequest_Mobile_Device_ScreenOrientation_descriptor();
  }
  static inline const ::std::string& ScreenOrientation_Name(ScreenOrientation value) {
    return BidRequest_Mobile_Device_ScreenOrientation_Name(value);
  }
  static inline bool ScreenOrientation_Parse(const ::std::string& name,
      ScreenOrientation* value) {
    return BidRequest_Mobile_Device_ScreenOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string os = 4;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 4;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional string os_version = 5;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 5;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // optional uint32 network = 6;
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 6;
  inline ::google::protobuf::uint32 network() const;
  inline void set_network(::google::protobuf::uint32 value);

  // optional int32 carrier_id = 7;
  inline bool has_carrier_id() const;
  inline void clear_carrier_id();
  static const int kCarrierIdFieldNumber = 7;
  inline ::google::protobuf::int32 carrier_id() const;
  inline void set_carrier_id(::google::protobuf::int32 value);

  // optional string longitude = 8;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 8;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional string latitude = 9;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 9;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional int32 screen_width = 10;
  inline bool has_screen_width() const;
  inline void clear_screen_width();
  static const int kScreenWidthFieldNumber = 10;
  inline ::google::protobuf::int32 screen_width() const;
  inline void set_screen_width(::google::protobuf::int32 value);

  // optional int32 screen_height = 11;
  inline bool has_screen_height() const;
  inline void clear_screen_height();
  static const int kScreenHeightFieldNumber = 11;
  inline ::google::protobuf::int32 screen_height() const;
  inline void set_screen_height(::google::protobuf::int32 value);

  // optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
  inline bool has_screen_orientation() const;
  inline void clear_screen_orientation();
  static const int kScreenOrientationFieldNumber = 12;
  inline ::MAX::BidRequest_Mobile_Device_ScreenOrientation screen_orientation() const;
  inline void set_screen_orientation(::MAX::BidRequest_Mobile_Device_ScreenOrientation value);

  // optional string idfa = 13;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 13;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  inline void set_allocated_idfa(::std::string* idfa);

  // optional string hashed_idfa = 14;
  inline bool has_hashed_idfa() const;
  inline void clear_hashed_idfa();
  static const int kHashedIdfaFieldNumber = 14;
  inline const ::std::string& hashed_idfa() const;
  inline void set_hashed_idfa(const ::std::string& value);
  inline void set_hashed_idfa(const char* value);
  inline void set_hashed_idfa(const char* value, size_t size);
  inline ::std::string* mutable_hashed_idfa();
  inline ::std::string* release_hashed_idfa();
  inline void set_allocated_hashed_idfa(::std::string* hashed_idfa);

  // optional string imei = 16;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 16;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional string hashed_imei = 15;
  inline bool has_hashed_imei() const;
  inline void clear_hashed_imei();
  static const int kHashedImeiFieldNumber = 15;
  inline const ::std::string& hashed_imei() const;
  inline void set_hashed_imei(const ::std::string& value);
  inline void set_hashed_imei(const char* value);
  inline void set_hashed_imei(const char* value, size_t size);
  inline ::std::string* mutable_hashed_imei();
  inline ::std::string* release_hashed_imei();
  inline void set_allocated_hashed_imei(::std::string* hashed_imei);

  // optional string android_id = 17;
  inline bool has_android_id() const;
  inline void clear_android_id();
  static const int kAndroidIdFieldNumber = 17;
  inline const ::std::string& android_id() const;
  inline void set_android_id(const ::std::string& value);
  inline void set_android_id(const char* value);
  inline void set_android_id(const char* value, size_t size);
  inline ::std::string* mutable_android_id();
  inline ::std::string* release_android_id();
  inline void set_allocated_android_id(::std::string* android_id);

  // optional string hashed_android_id = 18;
  inline bool has_hashed_android_id() const;
  inline void clear_hashed_android_id();
  static const int kHashedAndroidIdFieldNumber = 18;
  inline const ::std::string& hashed_android_id() const;
  inline void set_hashed_android_id(const ::std::string& value);
  inline void set_hashed_android_id(const char* value);
  inline void set_hashed_android_id(const char* value, size_t size);
  inline ::std::string* mutable_hashed_android_id();
  inline ::std::string* release_hashed_android_id();
  inline void set_allocated_hashed_android_id(::std::string* hashed_android_id);

  // optional string mac = 19;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 19;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string hashed_mac = 20;
  inline bool has_hashed_mac() const;
  inline void clear_hashed_mac();
  static const int kHashedMacFieldNumber = 20;
  inline const ::std::string& hashed_mac() const;
  inline void set_hashed_mac(const ::std::string& value);
  inline void set_hashed_mac(const char* value);
  inline void set_hashed_mac(const char* value, size_t size);
  inline ::std::string* mutable_hashed_mac();
  inline ::std::string* release_hashed_mac();
  inline void set_allocated_hashed_mac(::std::string* hashed_mac);

  // @@protoc_insertion_point(class_scope:MAX.BidRequest.Mobile.Device)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_carrier_id();
  inline void clear_has_carrier_id();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_screen_width();
  inline void clear_has_screen_width();
  inline void set_has_screen_height();
  inline void clear_has_screen_height();
  inline void set_has_screen_orientation();
  inline void clear_has_screen_orientation();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  inline void set_has_hashed_idfa();
  inline void clear_has_hashed_idfa();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_hashed_imei();
  inline void clear_has_hashed_imei();
  inline void set_has_android_id();
  inline void clear_has_android_id();
  inline void set_has_hashed_android_id();
  inline void clear_has_hashed_android_id();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_hashed_mac();
  inline void clear_has_hashed_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* platform_;
  ::std::string* model_;
  ::std::string* os_;
  ::std::string* os_version_;
  ::google::protobuf::uint32 network_;
  ::google::protobuf::int32 carrier_id_;
  ::std::string* longitude_;
  ::std::string* latitude_;
  ::google::protobuf::int32 screen_width_;
  ::google::protobuf::int32 screen_height_;
  ::std::string* idfa_;
  ::std::string* hashed_idfa_;
  ::std::string* imei_;
  ::std::string* hashed_imei_;
  ::std::string* android_id_;
  ::std::string* hashed_android_id_;
  ::std::string* mac_;
  ::std::string* hashed_mac_;
  int screen_orientation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Mobile : public ::google::protobuf::Message {
 public:
  BidRequest_Mobile();
  virtual ~BidRequest_Mobile();

  BidRequest_Mobile(const BidRequest_Mobile& from);

  inline BidRequest_Mobile& operator=(const BidRequest_Mobile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Mobile& default_instance();

  void Swap(BidRequest_Mobile* other);

  // implements Message ----------------------------------------------

  BidRequest_Mobile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Mobile& from);
  void MergeFrom(const BidRequest_Mobile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Mobile_Device Device;

  // accessors -------------------------------------------------------

  // optional bool is_app = 1;
  inline bool has_is_app() const;
  inline void clear_is_app();
  static const int kIsAppFieldNumber = 1;
  inline bool is_app() const;
  inline void set_is_app(bool value);

  // optional bool is_fullscreen = 2;
  inline bool has_is_fullscreen() const;
  inline void clear_is_fullscreen();
  static const int kIsFullscreenFieldNumber = 2;
  inline bool is_fullscreen() const;
  inline void set_is_fullscreen(bool value);

  // optional string app_id = 3;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional string package_name = 6;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 6;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  inline void set_allocated_package_name(::std::string* package_name);

  // optional .MAX.BidRequest.Mobile.Device device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::MAX::BidRequest_Mobile_Device& device() const;
  inline ::MAX::BidRequest_Mobile_Device* mutable_device();
  inline ::MAX::BidRequest_Mobile_Device* release_device();
  inline void set_allocated_device(::MAX::BidRequest_Mobile_Device* device);

  // repeated int32 app_category = 5;
  inline int app_category_size() const;
  inline void clear_app_category();
  static const int kAppCategoryFieldNumber = 5;
  inline ::google::protobuf::int32 app_category(int index) const;
  inline void set_app_category(int index, ::google::protobuf::int32 value);
  inline void add_app_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      app_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_app_category();

  // @@protoc_insertion_point(class_scope:MAX.BidRequest.Mobile)
 private:
  inline void set_has_is_app();
  inline void clear_has_is_app();
  inline void set_has_is_fullscreen();
  inline void clear_has_is_fullscreen();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* app_id_;
  ::std::string* package_name_;
  ::MAX::BidRequest_Mobile_Device* device_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > app_category_;
  bool is_app_;
  bool is_fullscreen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Mobile* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_ContentCategory ContentCategory;
  typedef BidRequest_AdSlot AdSlot;
  typedef BidRequest_Mobile Mobile;

  // accessors -------------------------------------------------------

  // required string bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // optional uint32 is_test = 9 [default = 0];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 9;
  inline ::google::protobuf::uint32 is_test() const;
  inline void set_is_test(::google::protobuf::uint32 value);

  // optional string mediav_user_id = 2 [deprecated = true];
  inline bool has_mediav_user_id() const PROTOBUF_DEPRECATED;
  inline void clear_mediav_user_id() PROTOBUF_DEPRECATED;
  static const int kMediavUserIdFieldNumber = 2;
  inline const ::std::string& mediav_user_id() const PROTOBUF_DEPRECATED;
  inline void set_mediav_user_id(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_mediav_user_id(const char* value) PROTOBUF_DEPRECATED;
  inline void set_mediav_user_id(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_mediav_user_id() PROTOBUF_DEPRECATED;
  inline ::std::string* release_mediav_user_id() PROTOBUF_DEPRECATED;
  inline void set_allocated_mediav_user_id(::std::string* mediav_user_id) PROTOBUF_DEPRECATED;

  // optional string mv_user_id = 17;
  inline bool has_mv_user_id() const;
  inline void clear_mv_user_id();
  static const int kMvUserIdFieldNumber = 17;
  inline const ::std::string& mv_user_id() const;
  inline void set_mv_user_id(const ::std::string& value);
  inline void set_mv_user_id(const char* value);
  inline void set_mv_user_id(const char* value, size_t size);
  inline ::std::string* mutable_mv_user_id();
  inline ::std::string* release_mv_user_id();
  inline void set_allocated_mv_user_id(::std::string* mv_user_id);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string user_agent = 4;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 4;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // repeated int32 user_vertical = 10;
  inline int user_vertical_size() const;
  inline void clear_user_vertical();
  static const int kUserVerticalFieldNumber = 10;
  inline ::google::protobuf::int32 user_vertical(int index) const;
  inline void set_user_vertical(int index, ::google::protobuf::int32 value);
  inline void add_user_vertical(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_vertical() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_vertical();

  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional uint32 adx_type = 6 [default = 0];
  inline bool has_adx_type() const;
  inline void clear_adx_type();
  static const int kAdxTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 adx_type() const;
  inline void set_adx_type(::google::protobuf::uint32 value);

  // optional string detected_language = 11;
  inline bool has_detected_language() const;
  inline void clear_detected_language();
  static const int kDetectedLanguageFieldNumber = 11;
  inline const ::std::string& detected_language() const;
  inline void set_detected_language(const ::std::string& value);
  inline void set_detected_language(const char* value);
  inline void set_detected_language(const char* value, size_t size);
  inline ::std::string* mutable_detected_language();
  inline ::std::string* release_detected_language();
  inline void set_allocated_detected_language(::std::string* detected_language);

  // optional int32 publisher_id = 13;
  inline bool has_publisher_id() const;
  inline void clear_publisher_id();
  static const int kPublisherIdFieldNumber = 13;
  inline ::google::protobuf::int32 publisher_id() const;
  inline void set_publisher_id(::google::protobuf::int32 value);

  // repeated int32 publisher_category = 14;
  inline int publisher_category_size() const;
  inline void clear_publisher_category();
  static const int kPublisherCategoryFieldNumber = 14;
  inline ::google::protobuf::int32 publisher_category(int index) const;
  inline void set_publisher_category(int index, ::google::protobuf::int32 value);
  inline void add_publisher_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      publisher_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_publisher_category();

  // optional int32 publisher_category_version = 15;
  inline bool has_publisher_category_version() const;
  inline void clear_publisher_category_version();
  static const int kPublisherCategoryVersionFieldNumber = 15;
  inline ::google::protobuf::int32 publisher_category_version() const;
  inline void set_publisher_category_version(::google::protobuf::int32 value);

  // repeated .MAX.BidRequest.ContentCategory content_category = 18;
  inline int content_category_size() const;
  inline void clear_content_category();
  static const int kContentCategoryFieldNumber = 18;
  inline const ::MAX::BidRequest_ContentCategory& content_category(int index) const;
  inline ::MAX::BidRequest_ContentCategory* mutable_content_category(int index);
  inline ::MAX::BidRequest_ContentCategory* add_content_category();
  inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_ContentCategory >&
      content_category() const;
  inline ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_ContentCategory >*
      mutable_content_category();

  // repeated .MAX.BidRequest.AdSlot adslot = 7;
  inline int adslot_size() const;
  inline void clear_adslot();
  static const int kAdslotFieldNumber = 7;
  inline const ::MAX::BidRequest_AdSlot& adslot(int index) const;
  inline ::MAX::BidRequest_AdSlot* mutable_adslot(int index);
  inline ::MAX::BidRequest_AdSlot* add_adslot();
  inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_AdSlot >&
      adslot() const;
  inline ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_AdSlot >*
      mutable_adslot();

  // repeated int32 excluded_attribute = 16;
  inline int excluded_attribute_size() const;
  inline void clear_excluded_attribute();
  static const int kExcludedAttributeFieldNumber = 16;
  inline ::google::protobuf::int32 excluded_attribute(int index) const;
  inline void set_excluded_attribute(int index, ::google::protobuf::int32 value);
  inline void add_excluded_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_attribute();

  // repeated int32 excluded_ad_category = 12;
  inline int excluded_ad_category_size() const;
  inline void clear_excluded_ad_category();
  static const int kExcludedAdCategoryFieldNumber = 12;
  inline ::google::protobuf::int32 excluded_ad_category(int index) const;
  inline void set_excluded_ad_category(int index, ::google::protobuf::int32 value);
  inline void add_excluded_ad_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excluded_ad_category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excluded_ad_category();

  // optional .MAX.BidRequest.Mobile mobile = 8;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 8;
  inline const ::MAX::BidRequest_Mobile& mobile() const;
  inline ::MAX::BidRequest_Mobile* mutable_mobile();
  inline ::MAX::BidRequest_Mobile* release_mobile();
  inline void set_allocated_mobile(::MAX::BidRequest_Mobile* mobile);

  // @@protoc_insertion_point(class_scope:MAX.BidRequest)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_mediav_user_id();
  inline void clear_has_mediav_user_id();
  inline void set_has_mv_user_id();
  inline void clear_has_mv_user_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_adx_type();
  inline void clear_has_adx_type();
  inline void set_has_detected_language();
  inline void clear_has_detected_language();
  inline void set_has_publisher_id();
  inline void clear_has_publisher_id();
  inline void set_has_publisher_category_version();
  inline void clear_has_publisher_category_version();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bid_;
  ::std::string* mediav_user_id_;
  ::std::string* mv_user_id_;
  ::std::string* ip_;
  ::google::protobuf::uint32 is_test_;
  ::google::protobuf::uint32 adx_type_;
  ::std::string* user_agent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_vertical_;
  ::std::string* url_;
  ::std::string* detected_language_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > publisher_category_;
  ::google::protobuf::int32 publisher_id_;
  ::google::protobuf::int32 publisher_category_version_;
  ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_ContentCategory > content_category_;
  ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_AdSlot > adslot_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_attribute_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excluded_ad_category_;
  ::MAX::BidRequest_Mobile* mobile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Ads : public ::google::protobuf::Message {
 public:
  BidResponse_Ads();
  virtual ~BidResponse_Ads();

  BidResponse_Ads(const BidResponse_Ads& from);

  inline BidResponse_Ads& operator=(const BidResponse_Ads& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Ads& default_instance();

  void Swap(BidResponse_Ads* other);

  // implements Message ----------------------------------------------

  BidResponse_Ads* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Ads& from);
  void MergeFrom(const BidResponse_Ads& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 adslot_id = 1;
  inline bool has_adslot_id() const;
  inline void clear_adslot_id();
  static const int kAdslotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 adslot_id() const;
  inline void set_adslot_id(::google::protobuf::uint32 value);

  // required uint32 max_cpm_price = 2;
  inline bool has_max_cpm_price() const;
  inline void clear_max_cpm_price();
  static const int kMaxCpmPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 max_cpm_price() const;
  inline void set_max_cpm_price(::google::protobuf::uint32 value);

  // optional string html_snippet = 3;
  inline bool has_html_snippet() const;
  inline void clear_html_snippet();
  static const int kHtmlSnippetFieldNumber = 3;
  inline const ::std::string& html_snippet() const;
  inline void set_html_snippet(const ::std::string& value);
  inline void set_html_snippet(const char* value);
  inline void set_html_snippet(const char* value, size_t size);
  inline ::std::string* mutable_html_snippet();
  inline ::std::string* release_html_snippet();
  inline void set_allocated_html_snippet(::std::string* html_snippet);

  // repeated int32 category = 4;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 4;
  inline ::google::protobuf::int32 category(int index) const;
  inline void set_category(int index, ::google::protobuf::int32 value);
  inline void add_category(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // repeated int32 creative_type = 5;
  inline int creative_type_size() const;
  inline void clear_creative_type();
  static const int kCreativeTypeFieldNumber = 5;
  inline ::google::protobuf::int32 creative_type(int index) const;
  inline void set_creative_type(int index, ::google::protobuf::int32 value);
  inline void add_creative_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      creative_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_creative_type();

  // repeated string destination_url = 6;
  inline int destination_url_size() const;
  inline void clear_destination_url();
  static const int kDestinationUrlFieldNumber = 6;
  inline const ::std::string& destination_url(int index) const;
  inline ::std::string* mutable_destination_url(int index);
  inline void set_destination_url(int index, const ::std::string& value);
  inline void set_destination_url(int index, const char* value);
  inline void set_destination_url(int index, const char* value, size_t size);
  inline ::std::string* add_destination_url();
  inline void add_destination_url(const ::std::string& value);
  inline void add_destination_url(const char* value);
  inline void add_destination_url(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& destination_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destination_url();

  // optional string advertiser_id = 7;
  inline bool has_advertiser_id() const;
  inline void clear_advertiser_id();
  static const int kAdvertiserIdFieldNumber = 7;
  inline const ::std::string& advertiser_id() const;
  inline void set_advertiser_id(const ::std::string& value);
  inline void set_advertiser_id(const char* value);
  inline void set_advertiser_id(const char* value, size_t size);
  inline ::std::string* mutable_advertiser_id();
  inline ::std::string* release_advertiser_id();
  inline void set_allocated_advertiser_id(::std::string* advertiser_id);

  // optional string creative_id = 8;
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 8;
  inline const ::std::string& creative_id() const;
  inline void set_creative_id(const ::std::string& value);
  inline void set_creative_id(const char* value);
  inline void set_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_creative_id();
  inline ::std::string* release_creative_id();
  inline void set_allocated_creative_id(::std::string* creative_id);

  // optional int32 width = 9;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 9;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional string extend_data = 11;
  inline bool has_extend_data() const;
  inline void clear_extend_data();
  static const int kExtendDataFieldNumber = 11;
  inline const ::std::string& extend_data() const;
  inline void set_extend_data(const ::std::string& value);
  inline void set_extend_data(const char* value);
  inline void set_extend_data(const char* value, size_t size);
  inline ::std::string* mutable_extend_data();
  inline ::std::string* release_extend_data();
  inline void set_allocated_extend_data(::std::string* extend_data);

  // optional string nurl = 12;
  inline bool has_nurl() const;
  inline void clear_nurl();
  static const int kNurlFieldNumber = 12;
  inline const ::std::string& nurl() const;
  inline void set_nurl(const ::std::string& value);
  inline void set_nurl(const char* value);
  inline void set_nurl(const char* value, size_t size);
  inline ::std::string* mutable_nurl();
  inline ::std::string* release_nurl();
  inline void set_allocated_nurl(::std::string* nurl);

  // @@protoc_insertion_point(class_scope:MAX.BidResponse.Ads)
 private:
  inline void set_has_adslot_id();
  inline void clear_has_adslot_id();
  inline void set_has_max_cpm_price();
  inline void clear_has_max_cpm_price();
  inline void set_has_html_snippet();
  inline void clear_has_html_snippet();
  inline void set_has_advertiser_id();
  inline void clear_has_advertiser_id();
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_extend_data();
  inline void clear_has_extend_data();
  inline void set_has_nurl();
  inline void clear_has_nurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 adslot_id_;
  ::google::protobuf::uint32 max_cpm_price_;
  ::std::string* html_snippet_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > creative_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destination_url_;
  ::std::string* advertiser_id_;
  ::std::string* creative_id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* extend_data_;
  ::std::string* nurl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Ads* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Ads Ads;

  // accessors -------------------------------------------------------

  // required string bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // repeated .MAX.BidResponse.Ads ads = 3;
  inline int ads_size() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 3;
  inline const ::MAX::BidResponse_Ads& ads(int index) const;
  inline ::MAX::BidResponse_Ads* mutable_ads(int index);
  inline ::MAX::BidResponse_Ads* add_ads();
  inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidResponse_Ads >&
      ads() const;
  inline ::google::protobuf::RepeatedPtrField< ::MAX::BidResponse_Ads >*
      mutable_ads();

  // @@protoc_insertion_point(class_scope:MAX.BidResponse)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bid_;
  ::google::protobuf::RepeatedPtrField< ::MAX::BidResponse_Ads > ads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_AssignDesc_max_2dbidding_5fv2_2e0_2eproto();
  friend void protobuf_ShutdownFile_max_2dbidding_5fv2_2e0_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_ContentCategory

// required int32 id = 1;
inline bool BidRequest_ContentCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_ContentCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_ContentCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_ContentCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BidRequest_ContentCategory::id() const {
  return id_;
}
inline void BidRequest_ContentCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 weight = 2 [default = 1000];
inline bool BidRequest_ContentCategory::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_ContentCategory::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_ContentCategory::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_ContentCategory::clear_weight() {
  weight_ = 1000;
  clear_has_weight();
}
inline ::google::protobuf::int32 BidRequest_ContentCategory::weight() const {
  return weight_;
}
inline void BidRequest_ContentCategory::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// BidRequest_AdSlot

// required uint32 id = 1;
inline bool BidRequest_AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_AdSlot::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BidRequest_AdSlot::id() const {
  return id_;
}
inline void BidRequest_AdSlot::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string pid = 2;
inline bool BidRequest_AdSlot::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_AdSlot::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_AdSlot::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_AdSlot::clear_pid() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    pid_->clear();
  }
  clear_has_pid();
}
inline const ::std::string& BidRequest_AdSlot::pid() const {
  return *pid_;
}
inline void BidRequest_AdSlot::set_pid(const ::std::string& value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
}
inline void BidRequest_AdSlot::set_pid(const char* value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
}
inline void BidRequest_AdSlot::set_pid(const char* value, size_t size) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_AdSlot::mutable_pid() {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  return pid_;
}
inline ::std::string* BidRequest_AdSlot::release_pid() {
  clear_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pid_;
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_AdSlot::set_allocated_pid(::std::string* pid) {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (pid) {
    set_has_pid();
    pid_ = pid;
  } else {
    clear_has_pid();
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 width = 3;
inline bool BidRequest_AdSlot::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_AdSlot::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_AdSlot::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_AdSlot::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::width() const {
  return width_;
}
inline void BidRequest_AdSlot::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 4;
inline bool BidRequest_AdSlot::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_AdSlot::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_AdSlot::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_AdSlot::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BidRequest_AdSlot::height() const {
  return height_;
}
inline void BidRequest_AdSlot::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// repeated uint32 view_type = 5;
inline int BidRequest_AdSlot::view_type_size() const {
  return view_type_.size();
}
inline void BidRequest_AdSlot::clear_view_type() {
  view_type_.Clear();
}
inline ::google::protobuf::uint32 BidRequest_AdSlot::view_type(int index) const {
  return view_type_.Get(index);
}
inline void BidRequest_AdSlot::set_view_type(int index, ::google::protobuf::uint32 value) {
  view_type_.Set(index, value);
}
inline void BidRequest_AdSlot::add_view_type(::google::protobuf::uint32 value) {
  view_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdSlot::view_type() const {
  return view_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdSlot::mutable_view_type() {
  return &view_type_;
}

// optional uint32 min_cpm_price = 6;
inline bool BidRequest_AdSlot::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_AdSlot::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_AdSlot::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_AdSlot::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
inline ::google::protobuf::uint32 BidRequest_AdSlot::min_cpm_price() const {
  return min_cpm_price_;
}
inline void BidRequest_AdSlot::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
}

// optional .MAX.BidRequest.AdSlot.SlotVisibility slot_visibility = 7 [default = NO_DETECTION];
inline bool BidRequest_AdSlot::has_slot_visibility() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_AdSlot::set_has_slot_visibility() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_AdSlot::clear_has_slot_visibility() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_AdSlot::clear_slot_visibility() {
  slot_visibility_ = 0;
  clear_has_slot_visibility();
}
inline ::MAX::BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::slot_visibility() const {
  return static_cast< ::MAX::BidRequest_AdSlot_SlotVisibility >(slot_visibility_);
}
inline void BidRequest_AdSlot::set_slot_visibility(::MAX::BidRequest_AdSlot_SlotVisibility value) {
  assert(::MAX::BidRequest_AdSlot_SlotVisibility_IsValid(value));
  set_has_slot_visibility();
  slot_visibility_ = value;
}

// -------------------------------------------------------------------

// BidRequest_Mobile_Device

// optional string platform = 1;
inline bool BidRequest_Mobile_Device::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile_Device::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile_Device::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& BidRequest_Mobile_Device::platform() const {
  return *platform_;
}
inline void BidRequest_Mobile_Device::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void BidRequest_Mobile_Device::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void BidRequest_Mobile_Device::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* BidRequest_Mobile_Device::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 3;
inline bool BidRequest_Mobile_Device::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& BidRequest_Mobile_Device::model() const {
  return *model_;
}
inline void BidRequest_Mobile_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void BidRequest_Mobile_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void BidRequest_Mobile_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* BidRequest_Mobile_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os = 4;
inline bool BidRequest_Mobile_Device::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_os() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile_Device::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& BidRequest_Mobile_Device::os() const {
  return *os_;
}
inline void BidRequest_Mobile_Device::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void BidRequest_Mobile_Device::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void BidRequest_Mobile_Device::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* BidRequest_Mobile_Device::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os_version = 5;
inline bool BidRequest_Mobile_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Mobile_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Mobile_Device::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& BidRequest_Mobile_Device::os_version() const {
  return *os_version_;
}
inline void BidRequest_Mobile_Device::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void BidRequest_Mobile_Device::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void BidRequest_Mobile_Device::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* BidRequest_Mobile_Device::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 network = 6;
inline bool BidRequest_Mobile_Device::has_network() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_network() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile_Device::clear_has_network() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile_Device::clear_network() {
  network_ = 0u;
  clear_has_network();
}
inline ::google::protobuf::uint32 BidRequest_Mobile_Device::network() const {
  return network_;
}
inline void BidRequest_Mobile_Device::set_network(::google::protobuf::uint32 value) {
  set_has_network();
  network_ = value;
}

// optional int32 carrier_id = 7;
inline bool BidRequest_Mobile_Device::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Mobile_Device::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Mobile_Device::clear_carrier_id() {
  carrier_id_ = 0;
  clear_has_carrier_id();
}
inline ::google::protobuf::int32 BidRequest_Mobile_Device::carrier_id() const {
  return carrier_id_;
}
inline void BidRequest_Mobile_Device::set_carrier_id(::google::protobuf::int32 value) {
  set_has_carrier_id();
  carrier_id_ = value;
}

// optional string longitude = 8;
inline bool BidRequest_Mobile_Device::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Mobile_Device::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Mobile_Device::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& BidRequest_Mobile_Device::longitude() const {
  return *longitude_;
}
inline void BidRequest_Mobile_Device::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void BidRequest_Mobile_Device::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
}
inline void BidRequest_Mobile_Device::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    longitude_ = new ::std::string;
  }
  return longitude_;
}
inline ::std::string* BidRequest_Mobile_Device::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::kEmptyString) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string latitude = 9;
inline bool BidRequest_Mobile_Device::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Mobile_Device::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Mobile_Device::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& BidRequest_Mobile_Device::latitude() const {
  return *latitude_;
}
inline void BidRequest_Mobile_Device::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void BidRequest_Mobile_Device::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
}
inline void BidRequest_Mobile_Device::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    latitude_ = new ::std::string;
  }
  return latitude_;
}
inline ::std::string* BidRequest_Mobile_Device::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::kEmptyString) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 screen_width = 10;
inline bool BidRequest_Mobile_Device::has_screen_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_screen_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Mobile_Device::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Mobile_Device::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
inline ::google::protobuf::int32 BidRequest_Mobile_Device::screen_width() const {
  return screen_width_;
}
inline void BidRequest_Mobile_Device::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
}

// optional int32 screen_height = 11;
inline bool BidRequest_Mobile_Device::has_screen_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_screen_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Mobile_Device::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Mobile_Device::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
inline ::google::protobuf::int32 BidRequest_Mobile_Device::screen_height() const {
  return screen_height_;
}
inline void BidRequest_Mobile_Device::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
}

// optional .MAX.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 12 [default = SCREEN_ORIENTATION_UNKNOWN];
inline bool BidRequest_Mobile_Device::has_screen_orientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_screen_orientation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Mobile_Device::clear_has_screen_orientation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Mobile_Device::clear_screen_orientation() {
  screen_orientation_ = 0;
  clear_has_screen_orientation();
}
inline ::MAX::BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::screen_orientation() const {
  return static_cast< ::MAX::BidRequest_Mobile_Device_ScreenOrientation >(screen_orientation_);
}
inline void BidRequest_Mobile_Device::set_screen_orientation(::MAX::BidRequest_Mobile_Device_ScreenOrientation value) {
  assert(::MAX::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value));
  set_has_screen_orientation();
  screen_orientation_ = value;
}

// optional string idfa = 13;
inline bool BidRequest_Mobile_Device::has_idfa() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_idfa() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Mobile_Device::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Mobile_Device::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& BidRequest_Mobile_Device::idfa() const {
  return *idfa_;
}
inline void BidRequest_Mobile_Device::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void BidRequest_Mobile_Device::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void BidRequest_Mobile_Device::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* BidRequest_Mobile_Device::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_idfa(::std::string* idfa) {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (idfa) {
    set_has_idfa();
    idfa_ = idfa;
  } else {
    clear_has_idfa();
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hashed_idfa = 14;
inline bool BidRequest_Mobile_Device::has_hashed_idfa() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_hashed_idfa() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest_Mobile_Device::clear_has_hashed_idfa() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest_Mobile_Device::clear_hashed_idfa() {
  if (hashed_idfa_ != &::google::protobuf::internal::kEmptyString) {
    hashed_idfa_->clear();
  }
  clear_has_hashed_idfa();
}
inline const ::std::string& BidRequest_Mobile_Device::hashed_idfa() const {
  return *hashed_idfa_;
}
inline void BidRequest_Mobile_Device::set_hashed_idfa(const ::std::string& value) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::kEmptyString) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_idfa(const char* value) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::kEmptyString) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_idfa(const char* value, size_t size) {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::kEmptyString) {
    hashed_idfa_ = new ::std::string;
  }
  hashed_idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_hashed_idfa() {
  set_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::kEmptyString) {
    hashed_idfa_ = new ::std::string;
  }
  return hashed_idfa_;
}
inline ::std::string* BidRequest_Mobile_Device::release_hashed_idfa() {
  clear_has_hashed_idfa();
  if (hashed_idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashed_idfa_;
    hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_hashed_idfa(::std::string* hashed_idfa) {
  if (hashed_idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_idfa_;
  }
  if (hashed_idfa) {
    set_has_hashed_idfa();
    hashed_idfa_ = hashed_idfa;
  } else {
    clear_has_hashed_idfa();
    hashed_idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imei = 16;
inline bool BidRequest_Mobile_Device::has_imei() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_imei() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidRequest_Mobile_Device::clear_has_imei() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidRequest_Mobile_Device::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& BidRequest_Mobile_Device::imei() const {
  return *imei_;
}
inline void BidRequest_Mobile_Device::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void BidRequest_Mobile_Device::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void BidRequest_Mobile_Device::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* BidRequest_Mobile_Device::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hashed_imei = 15;
inline bool BidRequest_Mobile_Device::has_hashed_imei() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_hashed_imei() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidRequest_Mobile_Device::clear_has_hashed_imei() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidRequest_Mobile_Device::clear_hashed_imei() {
  if (hashed_imei_ != &::google::protobuf::internal::kEmptyString) {
    hashed_imei_->clear();
  }
  clear_has_hashed_imei();
}
inline const ::std::string& BidRequest_Mobile_Device::hashed_imei() const {
  return *hashed_imei_;
}
inline void BidRequest_Mobile_Device::set_hashed_imei(const ::std::string& value) {
  set_has_hashed_imei();
  if (hashed_imei_ == &::google::protobuf::internal::kEmptyString) {
    hashed_imei_ = new ::std::string;
  }
  hashed_imei_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_imei(const char* value) {
  set_has_hashed_imei();
  if (hashed_imei_ == &::google::protobuf::internal::kEmptyString) {
    hashed_imei_ = new ::std::string;
  }
  hashed_imei_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_imei(const char* value, size_t size) {
  set_has_hashed_imei();
  if (hashed_imei_ == &::google::protobuf::internal::kEmptyString) {
    hashed_imei_ = new ::std::string;
  }
  hashed_imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_hashed_imei() {
  set_has_hashed_imei();
  if (hashed_imei_ == &::google::protobuf::internal::kEmptyString) {
    hashed_imei_ = new ::std::string;
  }
  return hashed_imei_;
}
inline ::std::string* BidRequest_Mobile_Device::release_hashed_imei() {
  clear_has_hashed_imei();
  if (hashed_imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashed_imei_;
    hashed_imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_hashed_imei(::std::string* hashed_imei) {
  if (hashed_imei_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_imei_;
  }
  if (hashed_imei) {
    set_has_hashed_imei();
    hashed_imei_ = hashed_imei;
  } else {
    clear_has_hashed_imei();
    hashed_imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string android_id = 17;
inline bool BidRequest_Mobile_Device::has_android_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_android_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidRequest_Mobile_Device::clear_has_android_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidRequest_Mobile_Device::clear_android_id() {
  if (android_id_ != &::google::protobuf::internal::kEmptyString) {
    android_id_->clear();
  }
  clear_has_android_id();
}
inline const ::std::string& BidRequest_Mobile_Device::android_id() const {
  return *android_id_;
}
inline void BidRequest_Mobile_Device::set_android_id(const ::std::string& value) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::kEmptyString) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(value);
}
inline void BidRequest_Mobile_Device::set_android_id(const char* value) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::kEmptyString) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(value);
}
inline void BidRequest_Mobile_Device::set_android_id(const char* value, size_t size) {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::kEmptyString) {
    android_id_ = new ::std::string;
  }
  android_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_android_id() {
  set_has_android_id();
  if (android_id_ == &::google::protobuf::internal::kEmptyString) {
    android_id_ = new ::std::string;
  }
  return android_id_;
}
inline ::std::string* BidRequest_Mobile_Device::release_android_id() {
  clear_has_android_id();
  if (android_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = android_id_;
    android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_android_id(::std::string* android_id) {
  if (android_id_ != &::google::protobuf::internal::kEmptyString) {
    delete android_id_;
  }
  if (android_id) {
    set_has_android_id();
    android_id_ = android_id;
  } else {
    clear_has_android_id();
    android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hashed_android_id = 18;
inline bool BidRequest_Mobile_Device::has_hashed_android_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_hashed_android_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BidRequest_Mobile_Device::clear_has_hashed_android_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BidRequest_Mobile_Device::clear_hashed_android_id() {
  if (hashed_android_id_ != &::google::protobuf::internal::kEmptyString) {
    hashed_android_id_->clear();
  }
  clear_has_hashed_android_id();
}
inline const ::std::string& BidRequest_Mobile_Device::hashed_android_id() const {
  return *hashed_android_id_;
}
inline void BidRequest_Mobile_Device::set_hashed_android_id(const ::std::string& value) {
  set_has_hashed_android_id();
  if (hashed_android_id_ == &::google::protobuf::internal::kEmptyString) {
    hashed_android_id_ = new ::std::string;
  }
  hashed_android_id_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_android_id(const char* value) {
  set_has_hashed_android_id();
  if (hashed_android_id_ == &::google::protobuf::internal::kEmptyString) {
    hashed_android_id_ = new ::std::string;
  }
  hashed_android_id_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_android_id(const char* value, size_t size) {
  set_has_hashed_android_id();
  if (hashed_android_id_ == &::google::protobuf::internal::kEmptyString) {
    hashed_android_id_ = new ::std::string;
  }
  hashed_android_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_hashed_android_id() {
  set_has_hashed_android_id();
  if (hashed_android_id_ == &::google::protobuf::internal::kEmptyString) {
    hashed_android_id_ = new ::std::string;
  }
  return hashed_android_id_;
}
inline ::std::string* BidRequest_Mobile_Device::release_hashed_android_id() {
  clear_has_hashed_android_id();
  if (hashed_android_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashed_android_id_;
    hashed_android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_hashed_android_id(::std::string* hashed_android_id) {
  if (hashed_android_id_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_android_id_;
  }
  if (hashed_android_id) {
    set_has_hashed_android_id();
    hashed_android_id_ = hashed_android_id;
  } else {
    clear_has_hashed_android_id();
    hashed_android_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mac = 19;
inline bool BidRequest_Mobile_Device::has_mac() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_mac() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest_Mobile_Device::clear_has_mac() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest_Mobile_Device::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& BidRequest_Mobile_Device::mac() const {
  return *mac_;
}
inline void BidRequest_Mobile_Device::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void BidRequest_Mobile_Device::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void BidRequest_Mobile_Device::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* BidRequest_Mobile_Device::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hashed_mac = 20;
inline bool BidRequest_Mobile_Device::has_hashed_mac() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BidRequest_Mobile_Device::set_has_hashed_mac() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BidRequest_Mobile_Device::clear_has_hashed_mac() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BidRequest_Mobile_Device::clear_hashed_mac() {
  if (hashed_mac_ != &::google::protobuf::internal::kEmptyString) {
    hashed_mac_->clear();
  }
  clear_has_hashed_mac();
}
inline const ::std::string& BidRequest_Mobile_Device::hashed_mac() const {
  return *hashed_mac_;
}
inline void BidRequest_Mobile_Device::set_hashed_mac(const ::std::string& value) {
  set_has_hashed_mac();
  if (hashed_mac_ == &::google::protobuf::internal::kEmptyString) {
    hashed_mac_ = new ::std::string;
  }
  hashed_mac_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_mac(const char* value) {
  set_has_hashed_mac();
  if (hashed_mac_ == &::google::protobuf::internal::kEmptyString) {
    hashed_mac_ = new ::std::string;
  }
  hashed_mac_->assign(value);
}
inline void BidRequest_Mobile_Device::set_hashed_mac(const char* value, size_t size) {
  set_has_hashed_mac();
  if (hashed_mac_ == &::google::protobuf::internal::kEmptyString) {
    hashed_mac_ = new ::std::string;
  }
  hashed_mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile_Device::mutable_hashed_mac() {
  set_has_hashed_mac();
  if (hashed_mac_ == &::google::protobuf::internal::kEmptyString) {
    hashed_mac_ = new ::std::string;
  }
  return hashed_mac_;
}
inline ::std::string* BidRequest_Mobile_Device::release_hashed_mac() {
  clear_has_hashed_mac();
  if (hashed_mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashed_mac_;
    hashed_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile_Device::set_allocated_hashed_mac(::std::string* hashed_mac) {
  if (hashed_mac_ != &::google::protobuf::internal::kEmptyString) {
    delete hashed_mac_;
  }
  if (hashed_mac) {
    set_has_hashed_mac();
    hashed_mac_ = hashed_mac;
  } else {
    clear_has_hashed_mac();
    hashed_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional bool is_app = 1;
inline bool BidRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
inline bool BidRequest_Mobile::is_app() const {
  return is_app_;
}
inline void BidRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
}

// optional bool is_fullscreen = 2;
inline bool BidRequest_Mobile::has_is_fullscreen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Mobile::set_has_is_fullscreen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Mobile::clear_has_is_fullscreen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Mobile::clear_is_fullscreen() {
  is_fullscreen_ = false;
  clear_has_is_fullscreen();
}
inline bool BidRequest_Mobile::is_fullscreen() const {
  return is_fullscreen_;
}
inline void BidRequest_Mobile::set_is_fullscreen(bool value) {
  set_has_is_fullscreen();
  is_fullscreen_ = value;
}

// optional string app_id = 3;
inline bool BidRequest_Mobile::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Mobile::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Mobile::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Mobile::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& BidRequest_Mobile::app_id() const {
  return *app_id_;
}
inline void BidRequest_Mobile::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void BidRequest_Mobile::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void BidRequest_Mobile::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* BidRequest_Mobile::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string package_name = 6;
inline bool BidRequest_Mobile::has_package_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Mobile::set_has_package_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Mobile::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Mobile::clear_package_name() {
  if (package_name_ != &::google::protobuf::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& BidRequest_Mobile::package_name() const {
  return *package_name_;
}
inline void BidRequest_Mobile::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void BidRequest_Mobile::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void BidRequest_Mobile::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Mobile::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::protobuf::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* BidRequest_Mobile::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Mobile::set_allocated_package_name(::std::string* package_name) {
  if (package_name_ != &::google::protobuf::internal::kEmptyString) {
    delete package_name_;
  }
  if (package_name) {
    set_has_package_name();
    package_name_ = package_name;
  } else {
    clear_has_package_name();
    package_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MAX.BidRequest.Mobile.Device device = 4;
inline bool BidRequest_Mobile::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Mobile::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Mobile::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Mobile::clear_device() {
  if (device_ != NULL) device_->::MAX::BidRequest_Mobile_Device::Clear();
  clear_has_device();
}
inline const ::MAX::BidRequest_Mobile_Device& BidRequest_Mobile::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::MAX::BidRequest_Mobile_Device* BidRequest_Mobile::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::MAX::BidRequest_Mobile_Device;
  return device_;
}
inline ::MAX::BidRequest_Mobile_Device* BidRequest_Mobile::release_device() {
  clear_has_device();
  ::MAX::BidRequest_Mobile_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest_Mobile::set_allocated_device(::MAX::BidRequest_Mobile_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// repeated int32 app_category = 5;
inline int BidRequest_Mobile::app_category_size() const {
  return app_category_.size();
}
inline void BidRequest_Mobile::clear_app_category() {
  app_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Mobile::app_category(int index) const {
  return app_category_.Get(index);
}
inline void BidRequest_Mobile::set_app_category(int index, ::google::protobuf::int32 value) {
  app_category_.Set(index, value);
}
inline void BidRequest_Mobile::add_app_category(::google::protobuf::int32 value) {
  app_category_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile::app_category() const {
  return app_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile::mutable_app_category() {
  return &app_category_;
}

// -------------------------------------------------------------------

// BidRequest

// required string bid = 1;
inline bool BidRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_bid() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& BidRequest::bid() const {
  return *bid_;
}
inline void BidRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
}
inline void BidRequest::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
}
inline void BidRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  return bid_;
}
inline ::std::string* BidRequest::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_test = 9 [default = 0];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = 0u;
  clear_has_is_test();
}
inline ::google::protobuf::uint32 BidRequest::is_test() const {
  return is_test_;
}
inline void BidRequest::set_is_test(::google::protobuf::uint32 value) {
  set_has_is_test();
  is_test_ = value;
}

// optional string mediav_user_id = 2 [deprecated = true];
inline bool BidRequest::has_mediav_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_mediav_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest::clear_has_mediav_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest::clear_mediav_user_id() {
  if (mediav_user_id_ != &::google::protobuf::internal::kEmptyString) {
    mediav_user_id_->clear();
  }
  clear_has_mediav_user_id();
}
inline const ::std::string& BidRequest::mediav_user_id() const {
  return *mediav_user_id_;
}
inline void BidRequest::set_mediav_user_id(const ::std::string& value) {
  set_has_mediav_user_id();
  if (mediav_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mediav_user_id_ = new ::std::string;
  }
  mediav_user_id_->assign(value);
}
inline void BidRequest::set_mediav_user_id(const char* value) {
  set_has_mediav_user_id();
  if (mediav_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mediav_user_id_ = new ::std::string;
  }
  mediav_user_id_->assign(value);
}
inline void BidRequest::set_mediav_user_id(const char* value, size_t size) {
  set_has_mediav_user_id();
  if (mediav_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mediav_user_id_ = new ::std::string;
  }
  mediav_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_mediav_user_id() {
  set_has_mediav_user_id();
  if (mediav_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mediav_user_id_ = new ::std::string;
  }
  return mediav_user_id_;
}
inline ::std::string* BidRequest::release_mediav_user_id() {
  clear_has_mediav_user_id();
  if (mediav_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mediav_user_id_;
    mediav_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_mediav_user_id(::std::string* mediav_user_id) {
  if (mediav_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mediav_user_id_;
  }
  if (mediav_user_id) {
    set_has_mediav_user_id();
    mediav_user_id_ = mediav_user_id;
  } else {
    clear_has_mediav_user_id();
    mediav_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mv_user_id = 17;
inline bool BidRequest::has_mv_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_mv_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_mv_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_mv_user_id() {
  if (mv_user_id_ != &::google::protobuf::internal::kEmptyString) {
    mv_user_id_->clear();
  }
  clear_has_mv_user_id();
}
inline const ::std::string& BidRequest::mv_user_id() const {
  return *mv_user_id_;
}
inline void BidRequest::set_mv_user_id(const ::std::string& value) {
  set_has_mv_user_id();
  if (mv_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mv_user_id_ = new ::std::string;
  }
  mv_user_id_->assign(value);
}
inline void BidRequest::set_mv_user_id(const char* value) {
  set_has_mv_user_id();
  if (mv_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mv_user_id_ = new ::std::string;
  }
  mv_user_id_->assign(value);
}
inline void BidRequest::set_mv_user_id(const char* value, size_t size) {
  set_has_mv_user_id();
  if (mv_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mv_user_id_ = new ::std::string;
  }
  mv_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_mv_user_id() {
  set_has_mv_user_id();
  if (mv_user_id_ == &::google::protobuf::internal::kEmptyString) {
    mv_user_id_ = new ::std::string;
  }
  return mv_user_id_;
}
inline ::std::string* BidRequest::release_mv_user_id() {
  clear_has_mv_user_id();
  if (mv_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mv_user_id_;
    mv_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_mv_user_id(::std::string* mv_user_id) {
  if (mv_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mv_user_id_;
  }
  if (mv_user_id) {
    set_has_mv_user_id();
    mv_user_id_ = mv_user_id;
  } else {
    clear_has_mv_user_id();
    mv_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 3;
inline bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest::ip() const {
  return *ip_;
}
inline void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BidRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* BidRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_agent = 4;
inline bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& BidRequest::user_agent() const {
  return *user_agent_;
}
inline void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  return user_agent_;
}
inline ::std::string* BidRequest::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 user_vertical = 10;
inline int BidRequest::user_vertical_size() const {
  return user_vertical_.size();
}
inline void BidRequest::clear_user_vertical() {
  user_vertical_.Clear();
}
inline ::google::protobuf::int32 BidRequest::user_vertical(int index) const {
  return user_vertical_.Get(index);
}
inline void BidRequest::set_user_vertical(int index, ::google::protobuf::int32 value) {
  user_vertical_.Set(index, value);
}
inline void BidRequest::add_user_vertical(::google::protobuf::int32 value) {
  user_vertical_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::user_vertical() const {
  return user_vertical_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_user_vertical() {
  return &user_vertical_;
}

// optional string url = 5;
inline bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BidRequest::url() const {
  return *url_;
}
inline void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BidRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 adx_type = 6 [default = 0];
inline bool BidRequest::has_adx_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest::set_has_adx_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest::clear_has_adx_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest::clear_adx_type() {
  adx_type_ = 0u;
  clear_has_adx_type();
}
inline ::google::protobuf::uint32 BidRequest::adx_type() const {
  return adx_type_;
}
inline void BidRequest::set_adx_type(::google::protobuf::uint32 value) {
  set_has_adx_type();
  adx_type_ = value;
}

// optional string detected_language = 11;
inline bool BidRequest::has_detected_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest::set_has_detected_language() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest::clear_has_detected_language() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest::clear_detected_language() {
  if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
    detected_language_->clear();
  }
  clear_has_detected_language();
}
inline const ::std::string& BidRequest::detected_language() const {
  return *detected_language_;
}
inline void BidRequest::set_detected_language(const ::std::string& value) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::kEmptyString) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(value);
}
inline void BidRequest::set_detected_language(const char* value) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::kEmptyString) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(value);
}
inline void BidRequest::set_detected_language(const char* value, size_t size) {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::kEmptyString) {
    detected_language_ = new ::std::string;
  }
  detected_language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_detected_language() {
  set_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::kEmptyString) {
    detected_language_ = new ::std::string;
  }
  return detected_language_;
}
inline ::std::string* BidRequest::release_detected_language() {
  clear_has_detected_language();
  if (detected_language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = detected_language_;
    detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_detected_language(::std::string* detected_language) {
  if (detected_language_ != &::google::protobuf::internal::kEmptyString) {
    delete detected_language_;
  }
  if (detected_language) {
    set_has_detected_language();
    detected_language_ = detected_language;
  } else {
    clear_has_detected_language();
    detected_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 publisher_id = 13;
inline bool BidRequest::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest::clear_publisher_id() {
  publisher_id_ = 0;
  clear_has_publisher_id();
}
inline ::google::protobuf::int32 BidRequest::publisher_id() const {
  return publisher_id_;
}
inline void BidRequest::set_publisher_id(::google::protobuf::int32 value) {
  set_has_publisher_id();
  publisher_id_ = value;
}

// repeated int32 publisher_category = 14;
inline int BidRequest::publisher_category_size() const {
  return publisher_category_.size();
}
inline void BidRequest::clear_publisher_category() {
  publisher_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest::publisher_category(int index) const {
  return publisher_category_.Get(index);
}
inline void BidRequest::set_publisher_category(int index, ::google::protobuf::int32 value) {
  publisher_category_.Set(index, value);
}
inline void BidRequest::add_publisher_category(::google::protobuf::int32 value) {
  publisher_category_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::publisher_category() const {
  return publisher_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_publisher_category() {
  return &publisher_category_;
}

// optional int32 publisher_category_version = 15;
inline bool BidRequest::has_publisher_category_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidRequest::set_has_publisher_category_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidRequest::clear_has_publisher_category_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidRequest::clear_publisher_category_version() {
  publisher_category_version_ = 0;
  clear_has_publisher_category_version();
}
inline ::google::protobuf::int32 BidRequest::publisher_category_version() const {
  return publisher_category_version_;
}
inline void BidRequest::set_publisher_category_version(::google::protobuf::int32 value) {
  set_has_publisher_category_version();
  publisher_category_version_ = value;
}

// repeated .MAX.BidRequest.ContentCategory content_category = 18;
inline int BidRequest::content_category_size() const {
  return content_category_.size();
}
inline void BidRequest::clear_content_category() {
  content_category_.Clear();
}
inline const ::MAX::BidRequest_ContentCategory& BidRequest::content_category(int index) const {
  return content_category_.Get(index);
}
inline ::MAX::BidRequest_ContentCategory* BidRequest::mutable_content_category(int index) {
  return content_category_.Mutable(index);
}
inline ::MAX::BidRequest_ContentCategory* BidRequest::add_content_category() {
  return content_category_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_ContentCategory >&
BidRequest::content_category() const {
  return content_category_;
}
inline ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_ContentCategory >*
BidRequest::mutable_content_category() {
  return &content_category_;
}

// repeated .MAX.BidRequest.AdSlot adslot = 7;
inline int BidRequest::adslot_size() const {
  return adslot_.size();
}
inline void BidRequest::clear_adslot() {
  adslot_.Clear();
}
inline const ::MAX::BidRequest_AdSlot& BidRequest::adslot(int index) const {
  return adslot_.Get(index);
}
inline ::MAX::BidRequest_AdSlot* BidRequest::mutable_adslot(int index) {
  return adslot_.Mutable(index);
}
inline ::MAX::BidRequest_AdSlot* BidRequest::add_adslot() {
  return adslot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_AdSlot >&
BidRequest::adslot() const {
  return adslot_;
}
inline ::google::protobuf::RepeatedPtrField< ::MAX::BidRequest_AdSlot >*
BidRequest::mutable_adslot() {
  return &adslot_;
}

// repeated int32 excluded_attribute = 16;
inline int BidRequest::excluded_attribute_size() const {
  return excluded_attribute_.size();
}
inline void BidRequest::clear_excluded_attribute() {
  excluded_attribute_.Clear();
}
inline ::google::protobuf::int32 BidRequest::excluded_attribute(int index) const {
  return excluded_attribute_.Get(index);
}
inline void BidRequest::set_excluded_attribute(int index, ::google::protobuf::int32 value) {
  excluded_attribute_.Set(index, value);
}
inline void BidRequest::add_excluded_attribute(::google::protobuf::int32 value) {
  excluded_attribute_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_attribute() const {
  return excluded_attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_attribute() {
  return &excluded_attribute_;
}

// repeated int32 excluded_ad_category = 12;
inline int BidRequest::excluded_ad_category_size() const {
  return excluded_ad_category_.size();
}
inline void BidRequest::clear_excluded_ad_category() {
  excluded_ad_category_.Clear();
}
inline ::google::protobuf::int32 BidRequest::excluded_ad_category(int index) const {
  return excluded_ad_category_.Get(index);
}
inline void BidRequest::set_excluded_ad_category(int index, ::google::protobuf::int32 value) {
  excluded_ad_category_.Set(index, value);
}
inline void BidRequest::add_excluded_ad_category(::google::protobuf::int32 value) {
  excluded_ad_category_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_ad_category() const {
  return excluded_ad_category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_ad_category() {
  return &excluded_ad_category_;
}

// optional .MAX.BidRequest.Mobile mobile = 8;
inline bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::MAX::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
inline const ::MAX::BidRequest_Mobile& BidRequest::mobile() const {
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
inline ::MAX::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) mobile_ = new ::MAX::BidRequest_Mobile;
  return mobile_;
}
inline ::MAX::BidRequest_Mobile* BidRequest::release_mobile() {
  clear_has_mobile();
  ::MAX::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_mobile(::MAX::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
}

// -------------------------------------------------------------------

// BidResponse_Ads

// required uint32 adslot_id = 1;
inline bool BidResponse_Ads::has_adslot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Ads::set_has_adslot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Ads::clear_has_adslot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Ads::clear_adslot_id() {
  adslot_id_ = 0u;
  clear_has_adslot_id();
}
inline ::google::protobuf::uint32 BidResponse_Ads::adslot_id() const {
  return adslot_id_;
}
inline void BidResponse_Ads::set_adslot_id(::google::protobuf::uint32 value) {
  set_has_adslot_id();
  adslot_id_ = value;
}

// required uint32 max_cpm_price = 2;
inline bool BidResponse_Ads::has_max_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Ads::set_has_max_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Ads::clear_has_max_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Ads::clear_max_cpm_price() {
  max_cpm_price_ = 0u;
  clear_has_max_cpm_price();
}
inline ::google::protobuf::uint32 BidResponse_Ads::max_cpm_price() const {
  return max_cpm_price_;
}
inline void BidResponse_Ads::set_max_cpm_price(::google::protobuf::uint32 value) {
  set_has_max_cpm_price();
  max_cpm_price_ = value;
}

// optional string html_snippet = 3;
inline bool BidResponse_Ads::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Ads::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Ads::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Ads::clear_html_snippet() {
  if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
    html_snippet_->clear();
  }
  clear_has_html_snippet();
}
inline const ::std::string& BidResponse_Ads::html_snippet() const {
  return *html_snippet_;
}
inline void BidResponse_Ads::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::kEmptyString) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
}
inline void BidResponse_Ads::set_html_snippet(const char* value) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::kEmptyString) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(value);
}
inline void BidResponse_Ads::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::kEmptyString) {
    html_snippet_ = new ::std::string;
  }
  html_snippet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::mutable_html_snippet() {
  set_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::kEmptyString) {
    html_snippet_ = new ::std::string;
  }
  return html_snippet_;
}
inline ::std::string* BidResponse_Ads::release_html_snippet() {
  clear_has_html_snippet();
  if (html_snippet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = html_snippet_;
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet_ != &::google::protobuf::internal::kEmptyString) {
    delete html_snippet_;
  }
  if (html_snippet) {
    set_has_html_snippet();
    html_snippet_ = html_snippet;
  } else {
    clear_has_html_snippet();
    html_snippet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 category = 4;
inline int BidResponse_Ads::category_size() const {
  return category_.size();
}
inline void BidResponse_Ads::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ads::category(int index) const {
  return category_.Get(index);
}
inline void BidResponse_Ads::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
}
inline void BidResponse_Ads::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::category() const {
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_category() {
  return &category_;
}

// repeated int32 creative_type = 5;
inline int BidResponse_Ads::creative_type_size() const {
  return creative_type_.size();
}
inline void BidResponse_Ads::clear_creative_type() {
  creative_type_.Clear();
}
inline ::google::protobuf::int32 BidResponse_Ads::creative_type(int index) const {
  return creative_type_.Get(index);
}
inline void BidResponse_Ads::set_creative_type(int index, ::google::protobuf::int32 value) {
  creative_type_.Set(index, value);
}
inline void BidResponse_Ads::add_creative_type(::google::protobuf::int32 value) {
  creative_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::creative_type() const {
  return creative_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_creative_type() {
  return &creative_type_;
}

// repeated string destination_url = 6;
inline int BidResponse_Ads::destination_url_size() const {
  return destination_url_.size();
}
inline void BidResponse_Ads::clear_destination_url() {
  destination_url_.Clear();
}
inline const ::std::string& BidResponse_Ads::destination_url(int index) const {
  return destination_url_.Get(index);
}
inline ::std::string* BidResponse_Ads::mutable_destination_url(int index) {
  return destination_url_.Mutable(index);
}
inline void BidResponse_Ads::set_destination_url(int index, const ::std::string& value) {
  destination_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_destination_url(int index, const char* value) {
  destination_url_.Mutable(index)->assign(value);
}
inline void BidResponse_Ads::set_destination_url(int index, const char* value, size_t size) {
  destination_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::add_destination_url() {
  return destination_url_.Add();
}
inline void BidResponse_Ads::add_destination_url(const ::std::string& value) {
  destination_url_.Add()->assign(value);
}
inline void BidResponse_Ads::add_destination_url(const char* value) {
  destination_url_.Add()->assign(value);
}
inline void BidResponse_Ads::add_destination_url(const char* value, size_t size) {
  destination_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::destination_url() const {
  return destination_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_destination_url() {
  return &destination_url_;
}

// optional string advertiser_id = 7;
inline bool BidResponse_Ads::has_advertiser_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidResponse_Ads::set_has_advertiser_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidResponse_Ads::clear_has_advertiser_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidResponse_Ads::clear_advertiser_id() {
  if (advertiser_id_ != &::google::protobuf::internal::kEmptyString) {
    advertiser_id_->clear();
  }
  clear_has_advertiser_id();
}
inline const ::std::string& BidResponse_Ads::advertiser_id() const {
  return *advertiser_id_;
}
inline void BidResponse_Ads::set_advertiser_id(const ::std::string& value) {
  set_has_advertiser_id();
  if (advertiser_id_ == &::google::protobuf::internal::kEmptyString) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(value);
}
inline void BidResponse_Ads::set_advertiser_id(const char* value) {
  set_has_advertiser_id();
  if (advertiser_id_ == &::google::protobuf::internal::kEmptyString) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(value);
}
inline void BidResponse_Ads::set_advertiser_id(const char* value, size_t size) {
  set_has_advertiser_id();
  if (advertiser_id_ == &::google::protobuf::internal::kEmptyString) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::mutable_advertiser_id() {
  set_has_advertiser_id();
  if (advertiser_id_ == &::google::protobuf::internal::kEmptyString) {
    advertiser_id_ = new ::std::string;
  }
  return advertiser_id_;
}
inline ::std::string* BidResponse_Ads::release_advertiser_id() {
  clear_has_advertiser_id();
  if (advertiser_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = advertiser_id_;
    advertiser_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_advertiser_id(::std::string* advertiser_id) {
  if (advertiser_id_ != &::google::protobuf::internal::kEmptyString) {
    delete advertiser_id_;
  }
  if (advertiser_id) {
    set_has_advertiser_id();
    advertiser_id_ = advertiser_id;
  } else {
    clear_has_advertiser_id();
    advertiser_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creative_id = 8;
inline bool BidResponse_Ads::has_creative_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidResponse_Ads::set_has_creative_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidResponse_Ads::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidResponse_Ads::clear_creative_id() {
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    creative_id_->clear();
  }
  clear_has_creative_id();
}
inline const ::std::string& BidResponse_Ads::creative_id() const {
  return *creative_id_;
}
inline void BidResponse_Ads::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
}
inline void BidResponse_Ads::set_creative_id(const char* value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
}
inline void BidResponse_Ads::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::mutable_creative_id() {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  return creative_id_;
}
inline ::std::string* BidResponse_Ads::release_creative_id() {
  clear_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_id_;
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (creative_id) {
    set_has_creative_id();
    creative_id_ = creative_id;
  } else {
    clear_has_creative_id();
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 width = 9;
inline bool BidResponse_Ads::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_Ads::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_Ads::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_Ads::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BidResponse_Ads::width() const {
  return width_;
}
inline void BidResponse_Ads::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 10;
inline bool BidResponse_Ads::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_Ads::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_Ads::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_Ads::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BidResponse_Ads::height() const {
  return height_;
}
inline void BidResponse_Ads::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional string extend_data = 11;
inline bool BidResponse_Ads::has_extend_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidResponse_Ads::set_has_extend_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidResponse_Ads::clear_has_extend_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidResponse_Ads::clear_extend_data() {
  if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
    extend_data_->clear();
  }
  clear_has_extend_data();
}
inline const ::std::string& BidResponse_Ads::extend_data() const {
  return *extend_data_;
}
inline void BidResponse_Ads::set_extend_data(const ::std::string& value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::kEmptyString) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
}
inline void BidResponse_Ads::set_extend_data(const char* value) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::kEmptyString) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(value);
}
inline void BidResponse_Ads::set_extend_data(const char* value, size_t size) {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::kEmptyString) {
    extend_data_ = new ::std::string;
  }
  extend_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::mutable_extend_data() {
  set_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::kEmptyString) {
    extend_data_ = new ::std::string;
  }
  return extend_data_;
}
inline ::std::string* BidResponse_Ads::release_extend_data() {
  clear_has_extend_data();
  if (extend_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extend_data_;
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_extend_data(::std::string* extend_data) {
  if (extend_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_data_;
  }
  if (extend_data) {
    set_has_extend_data();
    extend_data_ = extend_data;
  } else {
    clear_has_extend_data();
    extend_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nurl = 12;
inline bool BidResponse_Ads::has_nurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidResponse_Ads::set_has_nurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidResponse_Ads::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidResponse_Ads::clear_nurl() {
  if (nurl_ != &::google::protobuf::internal::kEmptyString) {
    nurl_->clear();
  }
  clear_has_nurl();
}
inline const ::std::string& BidResponse_Ads::nurl() const {
  return *nurl_;
}
inline void BidResponse_Ads::set_nurl(const ::std::string& value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::kEmptyString) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
}
inline void BidResponse_Ads::set_nurl(const char* value) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::kEmptyString) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
}
inline void BidResponse_Ads::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::kEmptyString) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Ads::mutable_nurl() {
  set_has_nurl();
  if (nurl_ == &::google::protobuf::internal::kEmptyString) {
    nurl_ = new ::std::string;
  }
  return nurl_;
}
inline ::std::string* BidResponse_Ads::release_nurl() {
  clear_has_nurl();
  if (nurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nurl_;
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Ads::set_allocated_nurl(::std::string* nurl) {
  if (nurl_ != &::google::protobuf::internal::kEmptyString) {
    delete nurl_;
  }
  if (nurl) {
    set_has_nurl();
    nurl_ = nurl;
  } else {
    clear_has_nurl();
    nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidResponse

// required string bid = 1;
inline bool BidResponse::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_bid() {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& BidResponse::bid() const {
  return *bid_;
}
inline void BidResponse::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
}
inline void BidResponse::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
}
inline void BidResponse::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    bid_ = new ::std::string;
  }
  return bid_;
}
inline ::std::string* BidResponse::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .MAX.BidResponse.Ads ads = 3;
inline int BidResponse::ads_size() const {
  return ads_.size();
}
inline void BidResponse::clear_ads() {
  ads_.Clear();
}
inline const ::MAX::BidResponse_Ads& BidResponse::ads(int index) const {
  return ads_.Get(index);
}
inline ::MAX::BidResponse_Ads* BidResponse::mutable_ads(int index) {
  return ads_.Mutable(index);
}
inline ::MAX::BidResponse_Ads* BidResponse::add_ads() {
  return ads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MAX::BidResponse_Ads >&
BidResponse::ads() const {
  return ads_;
}
inline ::google::protobuf::RepeatedPtrField< ::MAX::BidResponse_Ads >*
BidResponse::mutable_ads() {
  return &ads_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MAX

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAX::BidRequest_AdSlot_SlotVisibility>() {
  return ::MAX::BidRequest_AdSlot_SlotVisibility_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAX::BidRequest_Mobile_Device_ScreenOrientation>() {
  return ::MAX::BidRequest_Mobile_Device_ScreenOrientation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_max_2dbidding_5fv2_2e0_2eproto__INCLUDED
