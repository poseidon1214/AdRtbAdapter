// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenc-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tenc-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TENC {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Impression_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Impression_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SeatBid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tenc_2dbidding_2eproto() {
  protobuf_AddDesc_tenc_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tenc-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, impression_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Impression_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_Impression_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, tradecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, sns_lists_),
  };
  Request_Impression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_descriptor_,
      Request_Impression::default_instance_,
      Request_Impression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression));
  Request_Impression_Banner_descriptor_ = Request_Impression_descriptor_->nested_type(0);
  static const int Request_Impression_Banner_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, extra_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, visibility_),
  };
  Request_Impression_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_Banner_descriptor_,
      Request_Impression_Banner::default_instance_,
      Request_Impression_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression_Banner));
  Request_Impression_Video_descriptor_ = Request_Impression_descriptor_->nested_type(1);
  static const int Request_Impression_Video_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, linearity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, minduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, maxduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, height_),
  };
  Request_Impression_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Impression_Video_descriptor_,
      Request_Impression_Video::default_instance_,
      Request_Impression_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Impression_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Impression_Video));
  Request_Site_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_Site_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, ref_),
  };
  Request_Site_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Site_descriptor_,
      Request_Site::default_instance_,
      Request_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Site, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Site));
  Request_Device_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_Device_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, ua_),
  };
  Request_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Device_descriptor_,
      Request_Device::default_instance_,
      Request_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Device));
  Request_User_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_User_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, buyerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, age_),
  };
  Request_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_User_descriptor_,
      Request_User::default_instance_,
      Request_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_User));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, seatbid_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_Bid_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_Bid_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, adm_para_),
  };
  Response_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_Bid_descriptor_,
      Response_Bid::default_instance_,
      Response_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_Bid));
  Response_SeatBid_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_SeatBid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, bid_),
  };
  Response_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SeatBid_descriptor_,
      Response_SeatBid::default_instance_,
      Response_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SeatBid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tenc_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_descriptor_, &Request_Impression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_Banner_descriptor_, &Request_Impression_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Impression_Video_descriptor_, &Request_Impression_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Site_descriptor_, &Request_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Device_descriptor_, &Request_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_User_descriptor_, &Request_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_Bid_descriptor_, &Response_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SeatBid_descriptor_, &Response_SeatBid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tenc_2dbidding_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_Impression::default_instance_;
  delete Request_Impression_reflection_;
  delete Request_Impression_Banner::default_instance_;
  delete Request_Impression_Banner_reflection_;
  delete Request_Impression_Video::default_instance_;
  delete Request_Impression_Video_reflection_;
  delete Request_Site::default_instance_;
  delete Request_Site_reflection_;
  delete Request_Device::default_instance_;
  delete Request_Device_reflection_;
  delete Request_User::default_instance_;
  delete Request_User_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_Bid::default_instance_;
  delete Response_Bid_reflection_;
  delete Response_SeatBid::default_instance_;
  delete Response_SeatBid_reflection_;
}

void protobuf_AddDesc_tenc_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tenc-bidding.proto\022\004TENC\"\212\006\n\007Request\022\n"
    "\n\002id\030\001 \001(\t\022\n\n\002at\030\002 \001(\r\022 \n\004site\030\003 \001(\0132\022.T"
    "ENC.Request.Site\022$\n\006device\030\004 \001(\0132\024.TENC."
    "Request.Device\022 \n\004user\030\005 \001(\0132\022.TENC.Requ"
    "est.User\022,\n\nimpression\030\006 \003(\0132\030.TENC.Requ"
    "est.Impression\032\271\003\n\nImpression\022\n\n\002id\030\001 \001("
    "\t\022\r\n\005tagid\030\002 \001(\t\022\020\n\010bidfloor\030\003 \001(\002\022/\n\006ba"
    "nner\030\004 \001(\0132\037.TENC.Request.Impression.Ban"
    "ner\022-\n\005video\030\005 \001(\0132\036.TENC.Request.Impres"
    "sion.Video\022\020\n\010clientid\030\006 \001(\t\022\021\n\ttradecod"
    "e\030\007 \001(\t\022\021\n\tsns_lists\030\010 \001(\t\032_\n\006Banner\022\r\n\005"
    "width\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\r\n\005mimes\030\003 \003"
    "(\t\022\023\n\013extra_style\030\004 \001(\t\022\022\n\nvisibility\030\005 "
    "\001(\r\032\204\001\n\005Video\022\r\n\005mimes\030\001 \003(\t\022\021\n\tlinearit"
    "y\030\002 \001(\r\022\023\n\013minduration\030\003 \001(\r\022\023\n\013maxdurat"
    "ion\030\004 \001(\r\022\020\n\010protocol\030\005 \001(\r\022\r\n\005width\030\006 \001"
    "(\r\022\016\n\006height\030\007 \001(\r\032/\n\004Site\022\014\n\004name\030\001 \001(\t"
    "\022\014\n\004page\030\002 \001(\t\022\013\n\003ref\030\003 \001(\t\032 \n\006Device\022\n\n"
    "\002ip\030\001 \001(\t\022\n\n\002ua\030\002 \001(\t\032@\n\004User\022\n\n\002id\030\001 \001("
    "\t\022\017\n\007buyerid\030\002 \001(\t\022\016\n\006gender\030\003 \001(\t\022\013\n\003ag"
    "e\030\004 \001(\r\"\363\001\n\010Response\022\n\n\002id\030\001 \001(\t\022\r\n\005bidi"
    "d\030\002 \001(\t\022\'\n\007seatbid\030\003 \003(\0132\026.TENC.Response"
    ".SeatBid\032w\n\003Bid\022\n\n\002id\030\001 \001(\t\022\r\n\005impid\030\002 \001"
    "(\t\022\r\n\005price\030\003 \001(\002\022\014\n\004adid\030\004 \001(\t\022\014\n\004nurl\030"
    "\005 \001(\t\022\013\n\003adm\030\006 \001(\t\022\013\n\003ext\030\007 \001(\t\022\020\n\010adm_p"
    "ara\030\010 \001(\t\032*\n\007SeatBid\022\037\n\003bid\030\001 \003(\0132\022.TENC"
    ".Response.Bid", 1053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tenc-bidding.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_Impression::default_instance_ = new Request_Impression();
  Request_Impression_Banner::default_instance_ = new Request_Impression_Banner();
  Request_Impression_Video::default_instance_ = new Request_Impression_Video();
  Request_Site::default_instance_ = new Request_Site();
  Request_Device::default_instance_ = new Request_Device();
  Request_User::default_instance_ = new Request_User();
  Response::default_instance_ = new Response();
  Response_Bid::default_instance_ = new Response_Bid();
  Response_SeatBid::default_instance_ = new Response_SeatBid();
  Request::default_instance_->InitAsDefaultInstance();
  Request_Impression::default_instance_->InitAsDefaultInstance();
  Request_Impression_Banner::default_instance_->InitAsDefaultInstance();
  Request_Impression_Video::default_instance_->InitAsDefaultInstance();
  Request_Site::default_instance_->InitAsDefaultInstance();
  Request_Device::default_instance_->InitAsDefaultInstance();
  Request_User::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_Bid::default_instance_->InitAsDefaultInstance();
  Response_SeatBid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tenc_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tenc_2dbidding_2eproto {
  StaticDescriptorInitializer_tenc_2dbidding_2eproto() {
    protobuf_AddDesc_tenc_2dbidding_2eproto();
  }
} static_descriptor_initializer_tenc_2dbidding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Request_Impression_Banner::kWidthFieldNumber;
const int Request_Impression_Banner::kHeightFieldNumber;
const int Request_Impression_Banner::kMimesFieldNumber;
const int Request_Impression_Banner::kExtraStyleFieldNumber;
const int Request_Impression_Banner::kVisibilityFieldNumber;
#endif  // !_MSC_VER

Request_Impression_Banner::Request_Impression_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_Impression_Banner::InitAsDefaultInstance() {
}

Request_Impression_Banner::Request_Impression_Banner(const Request_Impression_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_Impression_Banner::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  extra_style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visibility_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression_Banner::~Request_Impression_Banner() {
  SharedDtor();
}

void Request_Impression_Banner::SharedDtor() {
  if (extra_style_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_style_;
  }
  if (this != default_instance_) {
  }
}

void Request_Impression_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_Banner_descriptor_;
}

const Request_Impression_Banner& Request_Impression_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_Impression_Banner* Request_Impression_Banner::default_instance_ = NULL;

Request_Impression_Banner* Request_Impression_Banner::New() const {
  return new Request_Impression_Banner;
}

void Request_Impression_Banner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
    if (has_extra_style()) {
      if (extra_style_ != &::google::protobuf::internal::kEmptyString) {
        extra_style_->clear();
      }
    }
    visibility_ = 0u;
  }
  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        if (input->ExpectTag(34)) goto parse_extra_style;
        break;
      }

      // optional string extra_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extra_style().data(), this->extra_style().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_visibility;
        break;
      }

      // optional uint32 visibility = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_Impression_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // optional uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mimes(i), output);
  }

  // optional string extra_style = 4;
  if (has_extra_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_style().data(), this->extra_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extra_style(), output);
  }

  // optional uint32 visibility = 5;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->visibility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_Impression_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // optional uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mimes(i), target);
  }

  // optional string extra_style = 4;
  if (has_extra_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_style().data(), this->extra_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extra_style(), target);
  }

  // optional uint32 visibility = 5;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->visibility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_Impression_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional string extra_style = 4;
    if (has_extra_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_style());
    }

    // optional uint32 visibility = 5;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

  }
  // repeated string mimes = 3;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression_Banner::MergeFrom(const Request_Impression_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_extra_style()) {
      set_extra_style(from.extra_style());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression_Banner::CopyFrom(const Request_Impression_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression_Banner::IsInitialized() const {

  return true;
}

void Request_Impression_Banner::Swap(Request_Impression_Banner* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    mimes_.Swap(&other->mimes_);
    std::swap(extra_style_, other->extra_style_);
    std::swap(visibility_, other->visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_Banner_descriptor_;
  metadata.reflection = Request_Impression_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Impression_Video::kMimesFieldNumber;
const int Request_Impression_Video::kLinearityFieldNumber;
const int Request_Impression_Video::kMindurationFieldNumber;
const int Request_Impression_Video::kMaxdurationFieldNumber;
const int Request_Impression_Video::kProtocolFieldNumber;
const int Request_Impression_Video::kWidthFieldNumber;
const int Request_Impression_Video::kHeightFieldNumber;
#endif  // !_MSC_VER

Request_Impression_Video::Request_Impression_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_Impression_Video::InitAsDefaultInstance() {
}

Request_Impression_Video::Request_Impression_Video(const Request_Impression_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_Impression_Video::SharedCtor() {
  _cached_size_ = 0;
  linearity_ = 0u;
  minduration_ = 0u;
  maxduration_ = 0u;
  protocol_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression_Video::~Request_Impression_Video() {
  SharedDtor();
}

void Request_Impression_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Impression_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_Video_descriptor_;
}

const Request_Impression_Video& Request_Impression_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_Impression_Video* Request_Impression_Video::default_instance_ = NULL;

Request_Impression_Video* Request_Impression_Video::New() const {
  return new Request_Impression_Video;
}

void Request_Impression_Video::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    linearity_ = 0u;
    minduration_ = 0u;
    maxduration_ = 0u;
    protocol_ = 0u;
    width_ = 0u;
    height_ = 0u;
  }
  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mimes;
        if (input->ExpectTag(16)) goto parse_linearity;
        break;
      }

      // optional uint32 linearity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linearity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linearity_)));
          set_has_linearity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minduration;
        break;
      }

      // optional uint32 minduration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minduration_)));
          set_has_minduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxduration;
        break;
      }

      // optional uint32 maxduration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxduration_)));
          set_has_maxduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_protocol;
        break;
      }

      // optional uint32 protocol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // optional uint32 width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional uint32 height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_Impression_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mimes(i).data(), this->mimes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mimes(i), output);
  }

  // optional uint32 linearity = 2;
  if (has_linearity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linearity(), output);
  }

  // optional uint32 minduration = 3;
  if (has_minduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minduration(), output);
  }

  // optional uint32 maxduration = 4;
  if (has_maxduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxduration(), output);
  }

  // optional uint32 protocol = 5;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->protocol(), output);
  }

  // optional uint32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // optional uint32 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_Impression_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mimes(i), target);
  }

  // optional uint32 linearity = 2;
  if (has_linearity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linearity(), target);
  }

  // optional uint32 minduration = 3;
  if (has_minduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minduration(), target);
  }

  // optional uint32 maxduration = 4;
  if (has_maxduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxduration(), target);
  }

  // optional uint32 protocol = 5;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->protocol(), target);
  }

  // optional uint32 width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->width(), target);
  }

  // optional uint32 height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_Impression_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 linearity = 2;
    if (has_linearity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linearity());
    }

    // optional uint32 minduration = 3;
    if (has_minduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minduration());
    }

    // optional uint32 maxduration = 4;
    if (has_maxduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxduration());
    }

    // optional uint32 protocol = 5;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol());
    }

    // optional uint32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  // repeated string mimes = 1;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression_Video::MergeFrom(const Request_Impression_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_linearity()) {
      set_linearity(from.linearity());
    }
    if (from.has_minduration()) {
      set_minduration(from.minduration());
    }
    if (from.has_maxduration()) {
      set_maxduration(from.maxduration());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression_Video::CopyFrom(const Request_Impression_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression_Video::IsInitialized() const {

  return true;
}

void Request_Impression_Video::Swap(Request_Impression_Video* other) {
  if (other != this) {
    mimes_.Swap(&other->mimes_);
    std::swap(linearity_, other->linearity_);
    std::swap(minduration_, other->minduration_);
    std::swap(maxduration_, other->maxduration_);
    std::swap(protocol_, other->protocol_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_Video_descriptor_;
  metadata.reflection = Request_Impression_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Impression::kIdFieldNumber;
const int Request_Impression::kTagidFieldNumber;
const int Request_Impression::kBidfloorFieldNumber;
const int Request_Impression::kBannerFieldNumber;
const int Request_Impression::kVideoFieldNumber;
const int Request_Impression::kClientidFieldNumber;
const int Request_Impression::kTradecodeFieldNumber;
const int Request_Impression::kSnsListsFieldNumber;
#endif  // !_MSC_VER

Request_Impression::Request_Impression()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_Impression::InitAsDefaultInstance() {
  banner_ = const_cast< ::TENC::Request_Impression_Banner*>(&::TENC::Request_Impression_Banner::default_instance());
  video_ = const_cast< ::TENC::Request_Impression_Video*>(&::TENC::Request_Impression_Video::default_instance());
}

Request_Impression::Request_Impression(const Request_Impression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_Impression::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bidfloor_ = 0;
  banner_ = NULL;
  video_ = NULL;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sns_lists_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Impression::~Request_Impression() {
  SharedDtor();
}

void Request_Impression::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (tagid_ != &::google::protobuf::internal::kEmptyString) {
    delete tagid_;
  }
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (tradecode_ != &::google::protobuf::internal::kEmptyString) {
    delete tradecode_;
  }
  if (sns_lists_ != &::google::protobuf::internal::kEmptyString) {
    delete sns_lists_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete video_;
  }
}

void Request_Impression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Impression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Impression_descriptor_;
}

const Request_Impression& Request_Impression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_Impression* Request_Impression::default_instance_ = NULL;

Request_Impression* Request_Impression::New() const {
  return new Request_Impression;
}

void Request_Impression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_tagid()) {
      if (tagid_ != &::google::protobuf::internal::kEmptyString) {
        tagid_->clear();
      }
    }
    bidfloor_ = 0;
    if (has_banner()) {
      if (banner_ != NULL) banner_->::TENC::Request_Impression_Banner::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::TENC::Request_Impression_Video::Clear();
    }
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_tradecode()) {
      if (tradecode_ != &::google::protobuf::internal::kEmptyString) {
        tradecode_->clear();
      }
    }
    if (has_sns_lists()) {
      if (sns_lists_ != &::google::protobuf::internal::kEmptyString) {
        sns_lists_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Impression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tagid;
        break;
      }

      // optional string tagid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tagid().data(), this->tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bidfloor;
        break;
      }

      // optional float bidfloor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }

      // optional .TENC.Request.Impression.Banner banner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .TENC.Request.Impression.Video video = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clientid;
        break;
      }

      // optional string clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tradecode;
        break;
      }

      // optional string tradecode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradecode().data(), this->tradecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sns_lists;
        break;
      }

      // optional string sns_lists = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sns_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sns_lists()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sns_lists().data(), this->sns_lists().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_Impression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string tagid = 2;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tagid(), output);
  }

  // optional float bidfloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidfloor(), output);
  }

  // optional .TENC.Request.Impression.Banner banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->banner(), output);
  }

  // optional .TENC.Request.Impression.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video(), output);
  }

  // optional string clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->clientid(), output);
  }

  // optional string tradecode = 7;
  if (has_tradecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradecode().data(), this->tradecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tradecode(), output);
  }

  // optional string sns_lists = 8;
  if (has_sns_lists()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sns_lists().data(), this->sns_lists().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sns_lists(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_Impression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string tagid = 2;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tagid(), target);
  }

  // optional float bidfloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidfloor(), target);
  }

  // optional .TENC.Request.Impression.Banner banner = 4;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->banner(), target);
  }

  // optional .TENC.Request.Impression.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video(), target);
  }

  // optional string clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientid(), target);
  }

  // optional string tradecode = 7;
  if (has_tradecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradecode().data(), this->tradecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tradecode(), target);
  }

  // optional string sns_lists = 8;
  if (has_sns_lists()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sns_lists().data(), this->sns_lists().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sns_lists(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_Impression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string tagid = 2;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagid());
    }

    // optional float bidfloor = 3;
    if (has_bidfloor()) {
      total_size += 1 + 4;
    }

    // optional .TENC.Request.Impression.Banner banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional .TENC.Request.Impression.Video video = 5;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional string clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string tradecode = 7;
    if (has_tradecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradecode());
    }

    // optional string sns_lists = 8;
    if (has_sns_lists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sns_lists());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Impression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Impression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Impression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Impression::MergeFrom(const Request_Impression& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_banner()) {
      mutable_banner()->::TENC::Request_Impression_Banner::MergeFrom(from.banner());
    }
    if (from.has_video()) {
      mutable_video()->::TENC::Request_Impression_Video::MergeFrom(from.video());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_tradecode()) {
      set_tradecode(from.tradecode());
    }
    if (from.has_sns_lists()) {
      set_sns_lists(from.sns_lists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Impression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Impression::CopyFrom(const Request_Impression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Impression::IsInitialized() const {

  return true;
}

void Request_Impression::Swap(Request_Impression* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tagid_, other->tagid_);
    std::swap(bidfloor_, other->bidfloor_);
    std::swap(banner_, other->banner_);
    std::swap(video_, other->video_);
    std::swap(clientid_, other->clientid_);
    std::swap(tradecode_, other->tradecode_);
    std::swap(sns_lists_, other->sns_lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Impression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Impression_descriptor_;
  metadata.reflection = Request_Impression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Site::kNameFieldNumber;
const int Request_Site::kPageFieldNumber;
const int Request_Site::kRefFieldNumber;
#endif  // !_MSC_VER

Request_Site::Request_Site()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_Site::InitAsDefaultInstance() {
}

Request_Site::Request_Site(const Request_Site& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_Site::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Site::~Request_Site() {
  SharedDtor();
}

void Request_Site::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (page_ != &::google::protobuf::internal::kEmptyString) {
    delete page_;
  }
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (this != default_instance_) {
  }
}

void Request_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Site_descriptor_;
}

const Request_Site& Request_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_Site* Request_Site::default_instance_ = NULL;

Request_Site* Request_Site::New() const {
  return new Request_Site;
}

void Request_Site::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_page()) {
      if (page_ != &::google::protobuf::internal::kEmptyString) {
        page_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // optional string page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ref;
        break;
      }

      // optional string ref = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->page(), output);
  }

  // optional string ref = 3;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_Site::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page(), target);
  }

  // optional string ref = 3;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_Site::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional string ref = 3;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Site::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Site* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Site*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Site::MergeFrom(const Request_Site& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Site::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Site::CopyFrom(const Request_Site& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Site::IsInitialized() const {

  return true;
}

void Request_Site::Swap(Request_Site* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(page_, other->page_);
    std::swap(ref_, other->ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Site_descriptor_;
  metadata.reflection = Request_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Device::kIpFieldNumber;
const int Request_Device::kUaFieldNumber;
#endif  // !_MSC_VER

Request_Device::Request_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_Device::InitAsDefaultInstance() {
}

Request_Device::Request_Device(const Request_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_Device::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Device::~Request_Device() {
  SharedDtor();
}

void Request_Device::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (this != default_instance_) {
  }
}

void Request_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Device_descriptor_;
}

const Request_Device& Request_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_Device* Request_Device::default_instance_ = NULL;

Request_Device* Request_Device::New() const {
  return new Request_Device;
}

void Request_Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_ua()) {
      if (ua_ != &::google::protobuf::internal::kEmptyString) {
        ua_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ua;
        break;
      }

      // optional string ua = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ua(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ua(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string ua = 2;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Device::MergeFrom(const Request_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ua()) {
      set_ua(from.ua());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Device::CopyFrom(const Request_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Device::IsInitialized() const {

  return true;
}

void Request_Device::Swap(Request_Device* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(ua_, other->ua_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Device_descriptor_;
  metadata.reflection = Request_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_User::kIdFieldNumber;
const int Request_User::kBuyeridFieldNumber;
const int Request_User::kGenderFieldNumber;
const int Request_User::kAgeFieldNumber;
#endif  // !_MSC_VER

Request_User::Request_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_User::InitAsDefaultInstance() {
}

Request_User::Request_User(const Request_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_User::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buyerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_User::~Request_User() {
  SharedDtor();
}

void Request_User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (buyerid_ != &::google::protobuf::internal::kEmptyString) {
    delete buyerid_;
  }
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (this != default_instance_) {
  }
}

void Request_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_User_descriptor_;
}

const Request_User& Request_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request_User* Request_User::default_instance_ = NULL;

Request_User* Request_User::New() const {
  return new Request_User;
}

void Request_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_buyerid()) {
      if (buyerid_ != &::google::protobuf::internal::kEmptyString) {
        buyerid_->clear();
      }
    }
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::kEmptyString) {
        gender_->clear();
      }
    }
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buyerid;
        break;
      }

      // optional string buyerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buyerid().data(), this->buyerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gender;
        break;
      }

      // optional string gender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_age;
        break;
      }

      // optional uint32 age = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string buyerid = 2;
  if (has_buyerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buyerid().data(), this->buyerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->buyerid(), output);
  }

  // optional string gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gender(), output);
  }

  // optional uint32 age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string buyerid = 2;
  if (has_buyerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buyerid().data(), this->buyerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyerid(), target);
  }

  // optional string gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gender(), target);
  }

  // optional uint32 age = 4;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string buyerid = 2;
    if (has_buyerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyerid());
    }

    // optional string gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional uint32 age = 4;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_User::MergeFrom(const Request_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buyerid()) {
      set_buyerid(from.buyerid());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_User::CopyFrom(const Request_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_User::IsInitialized() const {

  return true;
}

void Request_User::Swap(Request_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buyerid_, other->buyerid_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_User_descriptor_;
  metadata.reflection = Request_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kIdFieldNumber;
const int Request::kAtFieldNumber;
const int Request::kSiteFieldNumber;
const int Request::kDeviceFieldNumber;
const int Request::kUserFieldNumber;
const int Request::kImpressionFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  site_ = const_cast< ::TENC::Request_Site*>(&::TENC::Request_Site::default_instance());
  device_ = const_cast< ::TENC::Request_Device*>(&::TENC::Request_Device::default_instance());
  user_ = const_cast< ::TENC::Request_User*>(&::TENC::Request_User::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  at_ = 0u;
  site_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete site_;
    delete device_;
    delete user_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    at_ = 0u;
    if (has_site()) {
      if (site_ != NULL) site_->::TENC::Request_Site::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::TENC::Request_Device::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::TENC::Request_User::Clear();
    }
  }
  impression_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_at;
        break;
      }

      // optional uint32 at = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &at_)));
          set_has_at();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_site;
        break;
      }

      // optional .TENC.Request.Site site = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .TENC.Request.Device device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .TENC.Request.User user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_impression;
        break;
      }

      // repeated .TENC.Request.Impression impression = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_impression()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_impression;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint32 at = 2;
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->at(), output);
  }

  // optional .TENC.Request.Site site = 3;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->site(), output);
  }

  // optional .TENC.Request.Device device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device(), output);
  }

  // optional .TENC.Request.User user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // repeated .TENC.Request.Impression impression = 6;
  for (int i = 0; i < this->impression_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->impression(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 at = 2;
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->at(), target);
  }

  // optional .TENC.Request.Site site = 3;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->site(), target);
  }

  // optional .TENC.Request.Device device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device(), target);
  }

  // optional .TENC.Request.User user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // repeated .TENC.Request.Impression impression = 6;
  for (int i = 0; i < this->impression_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->impression(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint32 at = 2;
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->at());
    }

    // optional .TENC.Request.Site site = 3;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site());
    }

    // optional .TENC.Request.Device device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .TENC.Request.User user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .TENC.Request.Impression impression = 6;
  total_size += 1 * this->impression_size();
  for (int i = 0; i < this->impression_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impression(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  impression_.MergeFrom(from.impression_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
    if (from.has_site()) {
      mutable_site()->::TENC::Request_Site::MergeFrom(from.site());
    }
    if (from.has_device()) {
      mutable_device()->::TENC::Request_Device::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::TENC::Request_User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(at_, other->at_);
    std::swap(site_, other->site_);
    std::swap(device_, other->device_);
    std::swap(user_, other->user_);
    impression_.Swap(&other->impression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_Bid::kIdFieldNumber;
const int Response_Bid::kImpidFieldNumber;
const int Response_Bid::kPriceFieldNumber;
const int Response_Bid::kAdidFieldNumber;
const int Response_Bid::kNurlFieldNumber;
const int Response_Bid::kAdmFieldNumber;
const int Response_Bid::kExtFieldNumber;
const int Response_Bid::kAdmParaFieldNumber;
#endif  // !_MSC_VER

Response_Bid::Response_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_Bid::InitAsDefaultInstance() {
}

Response_Bid::Response_Bid(const Response_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_Bid::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  impid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adm_para_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_Bid::~Response_Bid() {
  SharedDtor();
}

void Response_Bid::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (impid_ != &::google::protobuf::internal::kEmptyString) {
    delete impid_;
  }
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    delete adid_;
  }
  if (nurl_ != &::google::protobuf::internal::kEmptyString) {
    delete nurl_;
  }
  if (adm_ != &::google::protobuf::internal::kEmptyString) {
    delete adm_;
  }
  if (ext_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_;
  }
  if (adm_para_ != &::google::protobuf::internal::kEmptyString) {
    delete adm_para_;
  }
  if (this != default_instance_) {
  }
}

void Response_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Bid_descriptor_;
}

const Response_Bid& Response_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Response_Bid* Response_Bid::default_instance_ = NULL;

Response_Bid* Response_Bid::New() const {
  return new Response_Bid;
}

void Response_Bid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_impid()) {
      if (impid_ != &::google::protobuf::internal::kEmptyString) {
        impid_->clear();
      }
    }
    price_ = 0;
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::kEmptyString) {
        adid_->clear();
      }
    }
    if (has_nurl()) {
      if (nurl_ != &::google::protobuf::internal::kEmptyString) {
        nurl_->clear();
      }
    }
    if (has_adm()) {
      if (adm_ != &::google::protobuf::internal::kEmptyString) {
        adm_->clear();
      }
    }
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::kEmptyString) {
        ext_->clear();
      }
    }
    if (has_adm_para()) {
      if (adm_para_ != &::google::protobuf::internal::kEmptyString) {
        adm_para_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // optional string impid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_price;
        break;
      }

      // optional float price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adid;
        break;
      }

      // optional string adid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nurl;
        break;
      }

      // optional string nurl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_adm;
        break;
      }

      // optional string adm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ext;
        break;
      }

      // optional string ext = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_adm_para;
        break;
      }

      // optional string adm_para = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adm_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adm_para().data(), this->adm_para().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->impid(), output);
  }

  // optional float price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->adid(), output);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nurl(), output);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->adm(), output);
  }

  // optional string ext = 7;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ext(), output);
  }

  // optional string adm_para = 8;
  if (has_adm_para()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adm_para().data(), this->adm_para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->adm_para(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // optional float price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->adid(), target);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nurl(), target);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->adm(), target);
  }

  // optional string ext = 7;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ext(), target);
  }

  // optional string adm_para = 8;
  if (has_adm_para()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adm_para().data(), this->adm_para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->adm_para(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string impid = 2;
    if (has_impid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impid());
    }

    // optional float price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional string adid = 4;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string nurl = 5;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

    // optional string adm = 6;
    if (has_adm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm());
    }

    // optional string ext = 7;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

    // optional string adm_para = 8;
    if (has_adm_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm_para());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_Bid::MergeFrom(const Response_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impid()) {
      set_impid(from.impid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_nurl()) {
      set_nurl(from.nurl());
    }
    if (from.has_adm()) {
      set_adm(from.adm());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
    if (from.has_adm_para()) {
      set_adm_para(from.adm_para());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_Bid::CopyFrom(const Response_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_Bid::IsInitialized() const {

  return true;
}

void Response_Bid::Swap(Response_Bid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impid_, other->impid_);
    std::swap(price_, other->price_);
    std::swap(adid_, other->adid_);
    std::swap(nurl_, other->nurl_);
    std::swap(adm_, other->adm_);
    std::swap(ext_, other->ext_);
    std::swap(adm_para_, other->adm_para_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_Bid_descriptor_;
  metadata.reflection = Response_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SeatBid::kBidFieldNumber;
#endif  // !_MSC_VER

Response_SeatBid::Response_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_SeatBid::InitAsDefaultInstance() {
}

Response_SeatBid::Response_SeatBid(const Response_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_SeatBid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SeatBid::~Response_SeatBid() {
  SharedDtor();
}

void Response_SeatBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SeatBid_descriptor_;
}

const Response_SeatBid& Response_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Response_SeatBid* Response_SeatBid::default_instance_ = NULL;

Response_SeatBid* Response_SeatBid::New() const {
  return new Response_SeatBid;
}

void Response_SeatBid::Clear() {
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TENC.Response.Bid bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TENC.Response.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TENC.Response.Bid bid = 1;
  for (int i = 0; i < this->bid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_SeatBid::ByteSize() const {
  int total_size = 0;

  // repeated .TENC.Response.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SeatBid::MergeFrom(const Response_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bid_.MergeFrom(from.bid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SeatBid::CopyFrom(const Response_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SeatBid::IsInitialized() const {

  return true;
}

void Response_SeatBid::Swap(Response_SeatBid* other) {
  if (other != this) {
    bid_.Swap(&other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SeatBid_descriptor_;
  metadata.reflection = Response_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kIdFieldNumber;
const int Response::kBididFieldNumber;
const int Response::kSeatbidFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (bidid_ != &::google::protobuf::internal::kEmptyString) {
    delete bidid_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tenc_2dbidding_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_bidid()) {
      if (bidid_ != &::google::protobuf::internal::kEmptyString) {
        bidid_->clear();
      }
    }
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bidid;
        break;
      }

      // optional string bidid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seatbid;
        break;
      }

      // repeated .TENC.Response.SeatBid seatbid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatbid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seatbid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bidid(), output);
  }

  // repeated .TENC.Response.SeatBid seatbid = 3;
  for (int i = 0; i < this->seatbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seatbid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bidid(), target);
  }

  // repeated .TENC.Response.SeatBid seatbid = 3;
  for (int i = 0; i < this->seatbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seatbid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string bidid = 2;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

  }
  // repeated .TENC.Response.SeatBid seatbid = 3;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bidid()) {
      set_bidid(from.bidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bidid_, other->bidid_);
    seatbid_.Swap(&other->seatbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TENC

// @@protoc_insertion_point(global_scope)
