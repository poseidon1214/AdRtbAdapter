// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bid_request.proto

#ifndef PROTOBUF_bid_5frequest_2eproto__INCLUDED
#define PROTOBUF_bid_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ads_serving {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bid_5frequest_2eproto();
void protobuf_AssignDesc_bid_5frequest_2eproto();
void protobuf_ShutdownFile_bid_5frequest_2eproto();

class Banner;
class Video;
class Impression;
class Site;
class Content;
class Device;
class Geo;
class User;
class BidRequest;

// ===================================================================

class Banner : public ::google::protobuf::Message {
 public:
  Banner();
  virtual ~Banner();

  Banner(const Banner& from);

  inline Banner& operator=(const Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Banner& default_instance();

  void Swap(Banner* other);

  // implements Message ----------------------------------------------

  Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Banner& from);
  void MergeFrom(const Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ad_zone_id = 4;
  inline bool has_ad_zone_id() const;
  inline void clear_ad_zone_id();
  static const int kAdZoneIdFieldNumber = 4;
  inline ::google::protobuf::int64 ad_zone_id() const;
  inline void set_ad_zone_id(::google::protobuf::int64 value);

  // optional int32 ad_type = 12;
  inline bool has_ad_type() const;
  inline void clear_ad_type();
  static const int kAdTypeFieldNumber = 12;
  inline ::google::protobuf::int32 ad_type() const;
  inline void set_ad_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Banner)
 private:
  inline void set_has_ad_zone_id();
  inline void clear_has_ad_zone_id();
  inline void set_has_ad_type();
  inline void clear_has_ad_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ad_zone_id_;
  ::google::protobuf::int32 ad_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Banner* default_instance_;
};
// -------------------------------------------------------------------

class Video : public ::google::protobuf::Message {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Video& default_instance();

  void Swap(Video* other);

  // implements Message ----------------------------------------------

  Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ad_zone_id = 1;
  inline bool has_ad_zone_id() const;
  inline void clear_ad_zone_id();
  static const int kAdZoneIdFieldNumber = 1;
  inline ::google::protobuf::int64 ad_zone_id() const;
  inline void set_ad_zone_id(::google::protobuf::int64 value);

  // optional int32 linearity = 3;
  inline bool has_linearity() const;
  inline void clear_linearity();
  static const int kLinearityFieldNumber = 3;
  inline ::google::protobuf::int32 linearity() const;
  inline void set_linearity(::google::protobuf::int32 value);

  // optional int32 ad_type = 13;
  inline bool has_ad_type() const;
  inline void clear_ad_type();
  static const int kAdTypeFieldNumber = 13;
  inline ::google::protobuf::int32 ad_type() const;
  inline void set_ad_type(::google::protobuf::int32 value);

  // optional int32 minduration = 4;
  inline bool has_minduration() const;
  inline void clear_minduration();
  static const int kMindurationFieldNumber = 4;
  inline ::google::protobuf::int32 minduration() const;
  inline void set_minduration(::google::protobuf::int32 value);

  // optional int32 maxduration = 5;
  inline bool has_maxduration() const;
  inline void clear_maxduration();
  static const int kMaxdurationFieldNumber = 5;
  inline ::google::protobuf::int32 maxduration() const;
  inline void set_maxduration(::google::protobuf::int32 value);

  // optional int32 protocol = 6;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 6;
  inline ::google::protobuf::int32 protocol() const;
  inline void set_protocol(::google::protobuf::int32 value);

  // optional int32 w = 7;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 7;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // optional int32 h = 8;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 8;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 startdelay = 9;
  inline bool has_startdelay() const;
  inline void clear_startdelay();
  static const int kStartdelayFieldNumber = 9;
  inline ::google::protobuf::int32 startdelay() const;
  inline void set_startdelay(::google::protobuf::int32 value);

  // optional bool is_entire_roll = 14 [default = false];
  inline bool has_is_entire_roll() const;
  inline void clear_is_entire_roll();
  static const int kIsEntireRollFieldNumber = 14;
  inline bool is_entire_roll() const;
  inline void set_is_entire_roll(bool value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Video)
 private:
  inline void set_has_ad_zone_id();
  inline void clear_has_ad_zone_id();
  inline void set_has_linearity();
  inline void clear_has_linearity();
  inline void set_has_ad_type();
  inline void clear_has_ad_type();
  inline void set_has_minduration();
  inline void clear_has_minduration();
  inline void set_has_maxduration();
  inline void clear_has_maxduration();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_startdelay();
  inline void clear_has_startdelay();
  inline void set_has_is_entire_roll();
  inline void clear_has_is_entire_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ad_zone_id_;
  ::google::protobuf::int32 linearity_;
  ::google::protobuf::int32 ad_type_;
  ::google::protobuf::int32 minduration_;
  ::google::protobuf::int32 maxduration_;
  ::google::protobuf::int32 protocol_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 startdelay_;
  bool is_entire_roll_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Video* default_instance_;
};
// -------------------------------------------------------------------

class Impression : public ::google::protobuf::Message {
 public:
  Impression();
  virtual ~Impression();

  Impression(const Impression& from);

  inline Impression& operator=(const Impression& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Impression& default_instance();

  void Swap(Impression* other);

  // implements Message ----------------------------------------------

  Impression* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Impression& from);
  void MergeFrom(const Impression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .ads_serving.proto.Banner banner = 2;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::ads_serving::proto::Banner& banner() const;
  inline ::ads_serving::proto::Banner* mutable_banner();
  inline ::ads_serving::proto::Banner* release_banner();
  inline void set_allocated_banner(::ads_serving::proto::Banner* banner);

  // optional .ads_serving.proto.Video video = 3;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 3;
  inline const ::ads_serving::proto::Video& video() const;
  inline ::ads_serving::proto::Video* mutable_video();
  inline ::ads_serving::proto::Video* release_video();
  inline void set_allocated_video(::ads_serving::proto::Video* video);

  // optional int32 bidfloor = 4 [default = 0];
  inline bool has_bidfloor() const;
  inline void clear_bidfloor();
  static const int kBidfloorFieldNumber = 4;
  inline ::google::protobuf::int32 bidfloor() const;
  inline void set_bidfloor(::google::protobuf::int32 value);

  // optional int32 campaign_id = 5;
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 5;
  inline ::google::protobuf::int32 campaign_id() const;
  inline void set_campaign_id(::google::protobuf::int32 value);

  // repeated int32 blocked_ad_tag = 6;
  inline int blocked_ad_tag_size() const;
  inline void clear_blocked_ad_tag();
  static const int kBlockedAdTagFieldNumber = 6;
  inline ::google::protobuf::int32 blocked_ad_tag(int index) const;
  inline void set_blocked_ad_tag(int index, ::google::protobuf::int32 value);
  inline void add_blocked_ad_tag(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      blocked_ad_tag() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_blocked_ad_tag();

  // repeated int32 blocked_ad_attribute = 7;
  inline int blocked_ad_attribute_size() const;
  inline void clear_blocked_ad_attribute();
  static const int kBlockedAdAttributeFieldNumber = 7;
  inline ::google::protobuf::int32 blocked_ad_attribute(int index) const;
  inline void set_blocked_ad_attribute(int index, ::google::protobuf::int32 value);
  inline void add_blocked_ad_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      blocked_ad_attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_blocked_ad_attribute();

  // optional bool is_pmp = 8 [default = false];
  inline bool has_is_pmp() const;
  inline void clear_is_pmp();
  static const int kIsPmpFieldNumber = 8;
  inline bool is_pmp() const;
  inline void set_is_pmp(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Impression)
  // @@protoc_insertion_point(class_scope:ads_serving.proto.Impression)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_campaign_id();
  inline void clear_has_campaign_id();
  inline void set_has_is_pmp();
  inline void clear_has_is_pmp();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::ads_serving::proto::Banner* banner_;
  ::ads_serving::proto::Video* video_;
  ::google::protobuf::int32 bidfloor_;
  ::google::protobuf::int32 campaign_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > blocked_ad_tag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > blocked_ad_attribute_;
  bool is_pmp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Impression* default_instance_;
};
// -------------------------------------------------------------------

class Site : public ::google::protobuf::Message {
 public:
  Site();
  virtual ~Site();

  Site(const Site& from);

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Site& default_instance();

  void Swap(Site* other);

  // implements Message ----------------------------------------------

  Site* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Site& from);
  void MergeFrom(const Site& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .ads_serving.proto.Content content = 11;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 11;
  inline const ::ads_serving::proto::Content& content() const;
  inline ::ads_serving::proto::Content* mutable_content();
  inline ::ads_serving::proto::Content* release_content();
  inline void set_allocated_content(::ads_serving::proto::Content* content);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Site)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ads_serving::proto::Content* content_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Site* default_instance_;
};
// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  void Swap(Content* other);

  // implements Message ----------------------------------------------

  Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string url = 6;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 6;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // repeated string keyword = 9;
  inline int keyword_size() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 9;
  inline const ::std::string& keyword(int index) const;
  inline ::std::string* mutable_keyword(int index);
  inline void set_keyword(int index, const ::std::string& value);
  inline void set_keyword(int index, const char* value);
  inline void set_keyword(int index, const char* value, size_t size);
  inline ::std::string* add_keyword();
  inline void add_keyword(const ::std::string& value);
  inline void add_keyword(const char* value);
  inline void add_keyword(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keyword() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keyword();

  // optional int32 len = 16;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 16;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional int64 album_id = 20;
  inline bool has_album_id() const;
  inline void clear_album_id();
  static const int kAlbumIdFieldNumber = 20;
  inline ::google::protobuf::int64 album_id() const;
  inline void set_album_id(::google::protobuf::int64 value);

  // optional int64 channel_id = 22;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 22;
  inline ::google::protobuf::int64 channel_id() const;
  inline void set_channel_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Content)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_album_id();
  inline void clear_has_album_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keyword_;
  ::google::protobuf::int64 album_id_;
  ::google::protobuf::int64 channel_id_;
  ::google::protobuf::int32 len_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ua = 2;
  inline bool has_ua() const;
  inline void clear_ua();
  static const int kUaFieldNumber = 2;
  inline const ::std::string& ua() const;
  inline void set_ua(const ::std::string& value);
  inline void set_ua(const char* value);
  inline void set_ua(const char* value, size_t size);
  inline ::std::string* mutable_ua();
  inline ::std::string* release_ua();
  inline void set_allocated_ua(::std::string* ua);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional .ads_serving.proto.Geo geo = 4;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 4;
  inline const ::ads_serving::proto::Geo& geo() const;
  inline ::ads_serving::proto::Geo* mutable_geo();
  inline ::ads_serving::proto::Geo* release_geo();
  inline void set_allocated_geo(::ads_serving::proto::Geo* geo);

  // optional int32 connection_type = 15;
  inline bool has_connection_type() const;
  inline void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 15;
  inline ::google::protobuf::int32 connection_type() const;
  inline void set_connection_type(::google::protobuf::int32 value);

  // optional int32 platform_id = 18;
  inline bool has_platform_id() const;
  inline void clear_platform_id();
  static const int kPlatformIdFieldNumber = 18;
  inline ::google::protobuf::int32 platform_id() const;
  inline void set_platform_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Device)
 private:
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_connection_type();
  inline void clear_has_connection_type();
  inline void set_has_platform_id();
  inline void clear_has_platform_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ua_;
  ::std::string* ip_;
  ::ads_serving::proto::Geo* geo_;
  ::google::protobuf::int32 connection_type_;
  ::google::protobuf::int32 platform_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class Geo : public ::google::protobuf::Message {
 public:
  Geo();
  virtual ~Geo();

  Geo(const Geo& from);

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geo& default_instance();

  void Swap(Geo* other);

  // implements Message ----------------------------------------------

  Geo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 metro = 5;
  inline bool has_metro() const;
  inline void clear_metro();
  static const int kMetroFieldNumber = 5;
  inline ::google::protobuf::int32 metro() const;
  inline void set_metro(::google::protobuf::int32 value);

  // optional int32 city = 6;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 6;
  inline ::google::protobuf::int32 city() const;
  inline void set_city(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.Geo)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_metro();
  inline void clear_has_metro();
  inline void set_has_city();
  inline void clear_has_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 metro_;
  ::google::protobuf::int32 city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static Geo* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bool is_privacy_protected = 2 [default = false];
  inline bool has_is_privacy_protected() const;
  inline void clear_is_privacy_protected();
  static const int kIsPrivacyProtectedFieldNumber = 2;
  inline bool is_privacy_protected() const;
  inline void set_is_privacy_protected(bool value);

  // @@protoc_insertion_point(class_scope:ads_serving.proto.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_privacy_protected();
  inline void clear_has_is_privacy_protected();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  bool is_privacy_protected_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .ads_serving.proto.User user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::ads_serving::proto::User& user() const;
  inline ::ads_serving::proto::User* mutable_user();
  inline ::ads_serving::proto::User* release_user();
  inline void set_allocated_user(::ads_serving::proto::User* user);

  // optional .ads_serving.proto.Site site = 3;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 3;
  inline const ::ads_serving::proto::Site& site() const;
  inline ::ads_serving::proto::Site* mutable_site();
  inline ::ads_serving::proto::Site* release_site();
  inline void set_allocated_site(::ads_serving::proto::Site* site);

  // optional .ads_serving.proto.Device device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::ads_serving::proto::Device& device() const;
  inline ::ads_serving::proto::Device* mutable_device();
  inline ::ads_serving::proto::Device* release_device();
  inline void set_allocated_device(::ads_serving::proto::Device* device);

  // repeated .ads_serving.proto.Impression imp = 8;
  inline int imp_size() const;
  inline void clear_imp();
  static const int kImpFieldNumber = 8;
  inline const ::ads_serving::proto::Impression& imp(int index) const;
  inline ::ads_serving::proto::Impression* mutable_imp(int index);
  inline ::ads_serving::proto::Impression* add_imp();
  inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Impression >&
      imp() const;
  inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Impression >*
      mutable_imp();

  // optional bool is_test = 9 [default = false];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 9;
  inline bool is_test() const;
  inline void set_is_test(bool value);

  // optional bool is_ping = 10 [default = false];
  inline bool has_is_ping() const;
  inline void clear_is_ping();
  static const int kIsPingFieldNumber = 10;
  inline bool is_ping() const;
  inline void set_is_ping(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest)
  // @@protoc_insertion_point(class_scope:ads_serving.proto.BidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_site();
  inline void clear_has_site();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_is_ping();
  inline void clear_has_is_ping();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::ads_serving::proto::User* user_;
  ::ads_serving::proto::Site* site_;
  ::ads_serving::proto::Device* device_;
  ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Impression > imp_;
  bool is_test_;
  bool is_ping_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_bid_5frequest_2eproto();
  friend void protobuf_AssignDesc_bid_5frequest_2eproto();
  friend void protobuf_ShutdownFile_bid_5frequest_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Banner

// optional int64 ad_zone_id = 4;
inline bool Banner::has_ad_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Banner::set_has_ad_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Banner::clear_has_ad_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Banner::clear_ad_zone_id() {
  ad_zone_id_ = GOOGLE_LONGLONG(0);
  clear_has_ad_zone_id();
}
inline ::google::protobuf::int64 Banner::ad_zone_id() const {
  return ad_zone_id_;
}
inline void Banner::set_ad_zone_id(::google::protobuf::int64 value) {
  set_has_ad_zone_id();
  ad_zone_id_ = value;
}

// optional int32 ad_type = 12;
inline bool Banner::has_ad_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Banner::set_has_ad_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Banner::clear_has_ad_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Banner::clear_ad_type() {
  ad_type_ = 0;
  clear_has_ad_type();
}
inline ::google::protobuf::int32 Banner::ad_type() const {
  return ad_type_;
}
inline void Banner::set_ad_type(::google::protobuf::int32 value) {
  set_has_ad_type();
  ad_type_ = value;
}

// -------------------------------------------------------------------

// Video

// optional int64 ad_zone_id = 1;
inline bool Video::has_ad_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Video::set_has_ad_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Video::clear_has_ad_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Video::clear_ad_zone_id() {
  ad_zone_id_ = GOOGLE_LONGLONG(0);
  clear_has_ad_zone_id();
}
inline ::google::protobuf::int64 Video::ad_zone_id() const {
  return ad_zone_id_;
}
inline void Video::set_ad_zone_id(::google::protobuf::int64 value) {
  set_has_ad_zone_id();
  ad_zone_id_ = value;
}

// optional int32 linearity = 3;
inline bool Video::has_linearity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Video::set_has_linearity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Video::clear_has_linearity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Video::clear_linearity() {
  linearity_ = 0;
  clear_has_linearity();
}
inline ::google::protobuf::int32 Video::linearity() const {
  return linearity_;
}
inline void Video::set_linearity(::google::protobuf::int32 value) {
  set_has_linearity();
  linearity_ = value;
}

// optional int32 ad_type = 13;
inline bool Video::has_ad_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Video::set_has_ad_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Video::clear_has_ad_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Video::clear_ad_type() {
  ad_type_ = 0;
  clear_has_ad_type();
}
inline ::google::protobuf::int32 Video::ad_type() const {
  return ad_type_;
}
inline void Video::set_ad_type(::google::protobuf::int32 value) {
  set_has_ad_type();
  ad_type_ = value;
}

// optional int32 minduration = 4;
inline bool Video::has_minduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Video::set_has_minduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Video::clear_has_minduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Video::clear_minduration() {
  minduration_ = 0;
  clear_has_minduration();
}
inline ::google::protobuf::int32 Video::minduration() const {
  return minduration_;
}
inline void Video::set_minduration(::google::protobuf::int32 value) {
  set_has_minduration();
  minduration_ = value;
}

// optional int32 maxduration = 5;
inline bool Video::has_maxduration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Video::set_has_maxduration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Video::clear_has_maxduration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Video::clear_maxduration() {
  maxduration_ = 0;
  clear_has_maxduration();
}
inline ::google::protobuf::int32 Video::maxduration() const {
  return maxduration_;
}
inline void Video::set_maxduration(::google::protobuf::int32 value) {
  set_has_maxduration();
  maxduration_ = value;
}

// optional int32 protocol = 6;
inline bool Video::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Video::set_has_protocol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Video::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Video::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::google::protobuf::int32 Video::protocol() const {
  return protocol_;
}
inline void Video::set_protocol(::google::protobuf::int32 value) {
  set_has_protocol();
  protocol_ = value;
}

// optional int32 w = 7;
inline bool Video::has_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Video::set_has_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Video::clear_has_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Video::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 Video::w() const {
  return w_;
}
inline void Video::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
}

// optional int32 h = 8;
inline bool Video::has_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Video::set_has_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Video::clear_has_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Video::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 Video::h() const {
  return h_;
}
inline void Video::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
}

// optional int32 startdelay = 9;
inline bool Video::has_startdelay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Video::set_has_startdelay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Video::clear_has_startdelay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Video::clear_startdelay() {
  startdelay_ = 0;
  clear_has_startdelay();
}
inline ::google::protobuf::int32 Video::startdelay() const {
  return startdelay_;
}
inline void Video::set_startdelay(::google::protobuf::int32 value) {
  set_has_startdelay();
  startdelay_ = value;
}

// optional bool is_entire_roll = 14 [default = false];
inline bool Video::has_is_entire_roll() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Video::set_has_is_entire_roll() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Video::clear_has_is_entire_roll() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Video::clear_is_entire_roll() {
  is_entire_roll_ = false;
  clear_has_is_entire_roll();
}
inline bool Video::is_entire_roll() const {
  return is_entire_roll_;
}
inline void Video::set_is_entire_roll(bool value) {
  set_has_is_entire_roll();
  is_entire_roll_ = value;
}

// -------------------------------------------------------------------

// Impression

// optional string id = 1;
inline bool Impression::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Impression::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Impression::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Impression::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Impression::id() const {
  return *id_;
}
inline void Impression::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Impression::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Impression::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Impression::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Impression::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Impression::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ads_serving.proto.Banner banner = 2;
inline bool Impression::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Impression::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Impression::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Impression::clear_banner() {
  if (banner_ != NULL) banner_->::ads_serving::proto::Banner::Clear();
  clear_has_banner();
}
inline const ::ads_serving::proto::Banner& Impression::banner() const {
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::ads_serving::proto::Banner* Impression::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::ads_serving::proto::Banner;
  return banner_;
}
inline ::ads_serving::proto::Banner* Impression::release_banner() {
  clear_has_banner();
  ::ads_serving::proto::Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void Impression::set_allocated_banner(::ads_serving::proto::Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
}

// optional .ads_serving.proto.Video video = 3;
inline bool Impression::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Impression::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Impression::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Impression::clear_video() {
  if (video_ != NULL) video_->::ads_serving::proto::Video::Clear();
  clear_has_video();
}
inline const ::ads_serving::proto::Video& Impression::video() const {
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::ads_serving::proto::Video* Impression::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::ads_serving::proto::Video;
  return video_;
}
inline ::ads_serving::proto::Video* Impression::release_video() {
  clear_has_video();
  ::ads_serving::proto::Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void Impression::set_allocated_video(::ads_serving::proto::Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
}

// optional int32 bidfloor = 4 [default = 0];
inline bool Impression::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Impression::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Impression::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Impression::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline ::google::protobuf::int32 Impression::bidfloor() const {
  return bidfloor_;
}
inline void Impression::set_bidfloor(::google::protobuf::int32 value) {
  set_has_bidfloor();
  bidfloor_ = value;
}

// optional int32 campaign_id = 5;
inline bool Impression::has_campaign_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Impression::set_has_campaign_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Impression::clear_has_campaign_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Impression::clear_campaign_id() {
  campaign_id_ = 0;
  clear_has_campaign_id();
}
inline ::google::protobuf::int32 Impression::campaign_id() const {
  return campaign_id_;
}
inline void Impression::set_campaign_id(::google::protobuf::int32 value) {
  set_has_campaign_id();
  campaign_id_ = value;
}

// repeated int32 blocked_ad_tag = 6;
inline int Impression::blocked_ad_tag_size() const {
  return blocked_ad_tag_.size();
}
inline void Impression::clear_blocked_ad_tag() {
  blocked_ad_tag_.Clear();
}
inline ::google::protobuf::int32 Impression::blocked_ad_tag(int index) const {
  return blocked_ad_tag_.Get(index);
}
inline void Impression::set_blocked_ad_tag(int index, ::google::protobuf::int32 value) {
  blocked_ad_tag_.Set(index, value);
}
inline void Impression::add_blocked_ad_tag(::google::protobuf::int32 value) {
  blocked_ad_tag_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Impression::blocked_ad_tag() const {
  return blocked_ad_tag_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Impression::mutable_blocked_ad_tag() {
  return &blocked_ad_tag_;
}

// repeated int32 blocked_ad_attribute = 7;
inline int Impression::blocked_ad_attribute_size() const {
  return blocked_ad_attribute_.size();
}
inline void Impression::clear_blocked_ad_attribute() {
  blocked_ad_attribute_.Clear();
}
inline ::google::protobuf::int32 Impression::blocked_ad_attribute(int index) const {
  return blocked_ad_attribute_.Get(index);
}
inline void Impression::set_blocked_ad_attribute(int index, ::google::protobuf::int32 value) {
  blocked_ad_attribute_.Set(index, value);
}
inline void Impression::add_blocked_ad_attribute(::google::protobuf::int32 value) {
  blocked_ad_attribute_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Impression::blocked_ad_attribute() const {
  return blocked_ad_attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Impression::mutable_blocked_ad_attribute() {
  return &blocked_ad_attribute_;
}

// optional bool is_pmp = 8 [default = false];
inline bool Impression::has_is_pmp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Impression::set_has_is_pmp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Impression::clear_has_is_pmp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Impression::clear_is_pmp() {
  is_pmp_ = false;
  clear_has_is_pmp();
}
inline bool Impression::is_pmp() const {
  return is_pmp_;
}
inline void Impression::set_is_pmp(bool value) {
  set_has_is_pmp();
  is_pmp_ = value;
}

// -------------------------------------------------------------------

// Site

// optional int32 id = 1;
inline bool Site::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Site::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Site::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Site::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Site::id() const {
  return id_;
}
inline void Site::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .ads_serving.proto.Content content = 11;
inline bool Site::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Site::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Site::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Site::clear_content() {
  if (content_ != NULL) content_->::ads_serving::proto::Content::Clear();
  clear_has_content();
}
inline const ::ads_serving::proto::Content& Site::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::ads_serving::proto::Content* Site::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::ads_serving::proto::Content;
  return content_;
}
inline ::ads_serving::proto::Content* Site::release_content() {
  clear_has_content();
  ::ads_serving::proto::Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void Site::set_allocated_content(::ads_serving::proto::Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// -------------------------------------------------------------------

// Content

// optional string title = 3;
inline bool Content::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Content::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Content::title() const {
  return *title_;
}
inline void Content::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Content::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Content::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Content::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Content::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 6;
inline bool Content::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Content::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Content::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Content::url() const {
  return *url_;
}
inline void Content::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Content::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Content::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Content::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Content::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string keyword = 9;
inline int Content::keyword_size() const {
  return keyword_.size();
}
inline void Content::clear_keyword() {
  keyword_.Clear();
}
inline const ::std::string& Content::keyword(int index) const {
  return keyword_.Get(index);
}
inline ::std::string* Content::mutable_keyword(int index) {
  return keyword_.Mutable(index);
}
inline void Content::set_keyword(int index, const ::std::string& value) {
  keyword_.Mutable(index)->assign(value);
}
inline void Content::set_keyword(int index, const char* value) {
  keyword_.Mutable(index)->assign(value);
}
inline void Content::set_keyword(int index, const char* value, size_t size) {
  keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::add_keyword() {
  return keyword_.Add();
}
inline void Content::add_keyword(const ::std::string& value) {
  keyword_.Add()->assign(value);
}
inline void Content::add_keyword(const char* value) {
  keyword_.Add()->assign(value);
}
inline void Content::add_keyword(const char* value, size_t size) {
  keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Content::keyword() const {
  return keyword_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Content::mutable_keyword() {
  return &keyword_;
}

// optional int32 len = 16;
inline bool Content::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Content::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Content::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Content::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 Content::len() const {
  return len_;
}
inline void Content::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional int64 album_id = 20;
inline bool Content::has_album_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Content::set_has_album_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Content::clear_has_album_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Content::clear_album_id() {
  album_id_ = GOOGLE_LONGLONG(0);
  clear_has_album_id();
}
inline ::google::protobuf::int64 Content::album_id() const {
  return album_id_;
}
inline void Content::set_album_id(::google::protobuf::int64 value) {
  set_has_album_id();
  album_id_ = value;
}

// optional int64 channel_id = 22;
inline bool Content::has_channel_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Content::set_has_channel_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Content::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Content::clear_channel_id() {
  channel_id_ = GOOGLE_LONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::int64 Content::channel_id() const {
  return channel_id_;
}
inline void Content::set_channel_id(::google::protobuf::int64 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// Device

// optional string ua = 2;
inline bool Device::has_ua() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Device::set_has_ua() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Device::clear_ua() {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    ua_->clear();
  }
  clear_has_ua();
}
inline const ::std::string& Device::ua() const {
  return *ua_;
}
inline void Device::set_ua(const ::std::string& value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void Device::set_ua(const char* value) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(value);
}
inline void Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  ua_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_ua() {
  set_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    ua_ = new ::std::string;
  }
  return ua_;
}
inline ::std::string* Device::release_ua() {
  clear_has_ua();
  if (ua_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ua_;
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Device::set_allocated_ua(::std::string* ua) {
  if (ua_ != &::google::protobuf::internal::kEmptyString) {
    delete ua_;
  }
  if (ua) {
    set_has_ua();
    ua_ = ua;
  } else {
    clear_has_ua();
    ua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 3;
inline bool Device::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Device::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Device::ip() const {
  return *ip_;
}
inline void Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ads_serving.proto.Geo geo = 4;
inline bool Device::has_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Device::set_has_geo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Device::clear_geo() {
  if (geo_ != NULL) geo_->::ads_serving::proto::Geo::Clear();
  clear_has_geo();
}
inline const ::ads_serving::proto::Geo& Device::geo() const {
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::ads_serving::proto::Geo* Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::ads_serving::proto::Geo;
  return geo_;
}
inline ::ads_serving::proto::Geo* Device::release_geo() {
  clear_has_geo();
  ::ads_serving::proto::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void Device::set_allocated_geo(::ads_serving::proto::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
}

// optional int32 connection_type = 15;
inline bool Device::has_connection_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Device::set_has_connection_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Device::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Device::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
inline ::google::protobuf::int32 Device::connection_type() const {
  return connection_type_;
}
inline void Device::set_connection_type(::google::protobuf::int32 value) {
  set_has_connection_type();
  connection_type_ = value;
}

// optional int32 platform_id = 18;
inline bool Device::has_platform_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Device::set_has_platform_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Device::clear_has_platform_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Device::clear_platform_id() {
  platform_id_ = 0;
  clear_has_platform_id();
}
inline ::google::protobuf::int32 Device::platform_id() const {
  return platform_id_;
}
inline void Device::set_platform_id(::google::protobuf::int32 value) {
  set_has_platform_id();
  platform_id_ = value;
}

// -------------------------------------------------------------------

// Geo

// optional int32 country = 3;
inline bool Geo::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geo::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geo::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 Geo::country() const {
  return country_;
}
inline void Geo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int32 metro = 5;
inline bool Geo::has_metro() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geo::set_has_metro() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geo::clear_has_metro() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geo::clear_metro() {
  metro_ = 0;
  clear_has_metro();
}
inline ::google::protobuf::int32 Geo::metro() const {
  return metro_;
}
inline void Geo::set_metro(::google::protobuf::int32 value) {
  set_has_metro();
  metro_ = value;
}

// optional int32 city = 6;
inline bool Geo::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geo::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geo::clear_city() {
  city_ = 0;
  clear_has_city();
}
inline ::google::protobuf::int32 Geo::city() const {
  return city_;
}
inline void Geo::set_city(::google::protobuf::int32 value) {
  set_has_city();
  city_ = value;
}

// -------------------------------------------------------------------

// User

// optional string id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& User::id() const {
  return *id_;
}
inline void User::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void User::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void User::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* User::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void User::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_privacy_protected = 2 [default = false];
inline bool User::has_is_privacy_protected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_is_privacy_protected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_is_privacy_protected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_is_privacy_protected() {
  is_privacy_protected_ = false;
  clear_has_is_privacy_protected();
}
inline bool User::is_privacy_protected() const {
  return is_privacy_protected_;
}
inline void User::set_is_privacy_protected(bool value) {
  set_has_is_privacy_protected();
  is_privacy_protected_ = value;
}

// -------------------------------------------------------------------

// BidRequest

// optional string id = 1;
inline bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest::id() const {
  return *id_;
}
inline void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ads_serving.proto.User user = 2;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::ads_serving::proto::User::Clear();
  clear_has_user();
}
inline const ::ads_serving::proto::User& BidRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::ads_serving::proto::User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::ads_serving::proto::User;
  return user_;
}
inline ::ads_serving::proto::User* BidRequest::release_user() {
  clear_has_user();
  ::ads_serving::proto::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::ads_serving::proto::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .ads_serving.proto.Site site = 3;
inline bool BidRequest::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest::clear_site() {
  if (site_ != NULL) site_->::ads_serving::proto::Site::Clear();
  clear_has_site();
}
inline const ::ads_serving::proto::Site& BidRequest::site() const {
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
inline ::ads_serving::proto::Site* BidRequest::mutable_site() {
  set_has_site();
  if (site_ == NULL) site_ = new ::ads_serving::proto::Site;
  return site_;
}
inline ::ads_serving::proto::Site* BidRequest::release_site() {
  clear_has_site();
  ::ads_serving::proto::Site* temp = site_;
  site_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_site(::ads_serving::proto::Site* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
}

// optional .ads_serving.proto.Device device = 5;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::ads_serving::proto::Device::Clear();
  clear_has_device();
}
inline const ::ads_serving::proto::Device& BidRequest::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::ads_serving::proto::Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::ads_serving::proto::Device;
  return device_;
}
inline ::ads_serving::proto::Device* BidRequest::release_device() {
  clear_has_device();
  ::ads_serving::proto::Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::ads_serving::proto::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// repeated .ads_serving.proto.Impression imp = 8;
inline int BidRequest::imp_size() const {
  return imp_.size();
}
inline void BidRequest::clear_imp() {
  imp_.Clear();
}
inline const ::ads_serving::proto::Impression& BidRequest::imp(int index) const {
  return imp_.Get(index);
}
inline ::ads_serving::proto::Impression* BidRequest::mutable_imp(int index) {
  return imp_.Mutable(index);
}
inline ::ads_serving::proto::Impression* BidRequest::add_imp() {
  return imp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Impression >&
BidRequest::imp() const {
  return imp_;
}
inline ::google::protobuf::RepeatedPtrField< ::ads_serving::proto::Impression >*
BidRequest::mutable_imp() {
  return &imp_;
}

// optional bool is_test = 9 [default = false];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
inline bool BidRequest::is_test() const {
  return is_test_;
}
inline void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
}

// optional bool is_ping = 10 [default = false];
inline bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
inline bool BidRequest::is_ping() const {
  return is_ping_;
}
inline void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ads_serving

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bid_5frequest_2eproto__INCLUDED
